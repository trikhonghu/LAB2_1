
ex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027f8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08002904  08002904  00012904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002940  08002940  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002940  08002940  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002940  08002940  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002940  08002940  00012940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002944  08002944  00012944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002948  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  2000000c  08002954  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000008c  08002954  0002008c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008709  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000159f  00000000  00000000  0002873e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000970  00000000  00000000  00029ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c8  00000000  00000000  0002a650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001634d  00000000  00000000  0002af18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000095dc  00000000  00000000  00041265  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008225e  00000000  00000000  0004a841  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cca9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002704  00000000  00000000  000ccaf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080028ec 	.word	0x080028ec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080028ec 	.word	0x080028ec

0800014c <setTimerMatrix>:
int switch_flag =0;

int counter_matrix = 0;
int matrix_flag = 0;

void setTimerMatrix(int duration){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	counter_matrix = duration;
 8000154:	4a05      	ldr	r2, [pc, #20]	; (800016c <setTimerMatrix+0x20>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	6013      	str	r3, [r2, #0]
	matrix_flag = 0;
 800015a:	4b05      	ldr	r3, [pc, #20]	; (8000170 <setTimerMatrix+0x24>)
 800015c:	2200      	movs	r2, #0
 800015e:	601a      	str	r2, [r3, #0]
}
 8000160:	bf00      	nop
 8000162:	370c      	adds	r7, #12
 8000164:	46bd      	mov	sp, r7
 8000166:	bc80      	pop	{r7}
 8000168:	4770      	bx	lr
 800016a:	bf00      	nop
 800016c:	20000038 	.word	0x20000038
 8000170:	2000003c 	.word	0x2000003c

08000174 <setTimerSwitch>:

void setTimerSwitch(int duration){
 8000174:	b480      	push	{r7}
 8000176:	b083      	sub	sp, #12
 8000178:	af00      	add	r7, sp, #0
 800017a:	6078      	str	r0, [r7, #4]
	counter_switch = duration;
 800017c:	4a05      	ldr	r2, [pc, #20]	; (8000194 <setTimerSwitch+0x20>)
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	6013      	str	r3, [r2, #0]
	switch_flag =0;
 8000182:	4b05      	ldr	r3, [pc, #20]	; (8000198 <setTimerSwitch+0x24>)
 8000184:	2200      	movs	r2, #0
 8000186:	601a      	str	r2, [r3, #0]
}
 8000188:	bf00      	nop
 800018a:	370c      	adds	r7, #12
 800018c:	46bd      	mov	sp, r7
 800018e:	bc80      	pop	{r7}
 8000190:	4770      	bx	lr
 8000192:	bf00      	nop
 8000194:	20000030 	.word	0x20000030
 8000198:	20000034 	.word	0x20000034

0800019c <setTimerDot>:

void setTimerDot(int duration){
 800019c:	b480      	push	{r7}
 800019e:	b083      	sub	sp, #12
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	6078      	str	r0, [r7, #4]
	counterDot = duration;
 80001a4:	4a05      	ldr	r2, [pc, #20]	; (80001bc <setTimerDot+0x20>)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	6013      	str	r3, [r2, #0]
	dot_flag = 0;
 80001aa:	4b05      	ldr	r3, [pc, #20]	; (80001c0 <setTimerDot+0x24>)
 80001ac:	2200      	movs	r2, #0
 80001ae:	601a      	str	r2, [r3, #0]
}
 80001b0:	bf00      	nop
 80001b2:	370c      	adds	r7, #12
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bc80      	pop	{r7}
 80001b8:	4770      	bx	lr
 80001ba:	bf00      	nop
 80001bc:	20000028 	.word	0x20000028
 80001c0:	2000002c 	.word	0x2000002c

080001c4 <timerRun>:

void timerRun(){
 80001c4:	b480      	push	{r7}
 80001c6:	af00      	add	r7, sp, #0
	if(counter_matrix > 0){
 80001c8:	4b19      	ldr	r3, [pc, #100]	; (8000230 <timerRun+0x6c>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	dd0b      	ble.n	80001e8 <timerRun+0x24>
		counter_matrix--;
 80001d0:	4b17      	ldr	r3, [pc, #92]	; (8000230 <timerRun+0x6c>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	3b01      	subs	r3, #1
 80001d6:	4a16      	ldr	r2, [pc, #88]	; (8000230 <timerRun+0x6c>)
 80001d8:	6013      	str	r3, [r2, #0]
		if(counter_matrix <= 0){
 80001da:	4b15      	ldr	r3, [pc, #84]	; (8000230 <timerRun+0x6c>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	2b00      	cmp	r3, #0
 80001e0:	dc02      	bgt.n	80001e8 <timerRun+0x24>
			matrix_flag = 1;
 80001e2:	4b14      	ldr	r3, [pc, #80]	; (8000234 <timerRun+0x70>)
 80001e4:	2201      	movs	r2, #1
 80001e6:	601a      	str	r2, [r3, #0]
		}
	}

    if(counter_switch >0){
 80001e8:	4b13      	ldr	r3, [pc, #76]	; (8000238 <timerRun+0x74>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	dd0b      	ble.n	8000208 <timerRun+0x44>
    	counter_switch--;
 80001f0:	4b11      	ldr	r3, [pc, #68]	; (8000238 <timerRun+0x74>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	3b01      	subs	r3, #1
 80001f6:	4a10      	ldr	r2, [pc, #64]	; (8000238 <timerRun+0x74>)
 80001f8:	6013      	str	r3, [r2, #0]
    	if(counter_switch <= 0){
 80001fa:	4b0f      	ldr	r3, [pc, #60]	; (8000238 <timerRun+0x74>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	2b00      	cmp	r3, #0
 8000200:	dc02      	bgt.n	8000208 <timerRun+0x44>
    		switch_flag =1;
 8000202:	4b0e      	ldr	r3, [pc, #56]	; (800023c <timerRun+0x78>)
 8000204:	2201      	movs	r2, #1
 8000206:	601a      	str	r2, [r3, #0]
    	}
    }

	if(counterDot > 0){
 8000208:	4b0d      	ldr	r3, [pc, #52]	; (8000240 <timerRun+0x7c>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	2b00      	cmp	r3, #0
 800020e:	dd0b      	ble.n	8000228 <timerRun+0x64>
		counterDot--;
 8000210:	4b0b      	ldr	r3, [pc, #44]	; (8000240 <timerRun+0x7c>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	3b01      	subs	r3, #1
 8000216:	4a0a      	ldr	r2, [pc, #40]	; (8000240 <timerRun+0x7c>)
 8000218:	6013      	str	r3, [r2, #0]
		if(counterDot <= 0){
 800021a:	4b09      	ldr	r3, [pc, #36]	; (8000240 <timerRun+0x7c>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	2b00      	cmp	r3, #0
 8000220:	dc02      	bgt.n	8000228 <timerRun+0x64>
			dot_flag = 1;
 8000222:	4b08      	ldr	r3, [pc, #32]	; (8000244 <timerRun+0x80>)
 8000224:	2201      	movs	r2, #1
 8000226:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000228:	bf00      	nop
 800022a:	46bd      	mov	sp, r7
 800022c:	bc80      	pop	{r7}
 800022e:	4770      	bx	lr
 8000230:	20000038 	.word	0x20000038
 8000234:	2000003c 	.word	0x2000003c
 8000238:	20000030 	.word	0x20000030
 800023c:	20000034 	.word	0x20000034
 8000240:	20000028 	.word	0x20000028
 8000244:	2000002c 	.word	0x2000002c

08000248 <updateLEDMatrix.5989>:
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
  }*/

  void updateLEDMatrix (int index ){
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
 8000250:	f8c7 c000 	str.w	ip, [r7]
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	2b07      	cmp	r3, #7
 8000258:	f200 8310 	bhi.w	800087c <updateLEDMatrix.5989+0x634>
 800025c:	a201      	add	r2, pc, #4	; (adr r2, 8000264 <updateLEDMatrix.5989+0x1c>)
 800025e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000262:	bf00      	nop
 8000264:	08000285 	.word	0x08000285
 8000268:	08000343 	.word	0x08000343
 800026c:	08000401 	.word	0x08000401
 8000270:	080004bf 	.word	0x080004bf
 8000274:	08000585 	.word	0x08000585
 8000278:	08000643 	.word	0x08000643
 800027c:	08000701 	.word	0x08000701
 8000280:	080007bf 	.word	0x080007bf
	  switch ( index ){
	  	  case 0:
	  		HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, SET);
 8000284:	2201      	movs	r2, #1
 8000286:	f44f 7180 	mov.w	r1, #256	; 0x100
 800028a:	48bc      	ldr	r0, [pc, #752]	; (800057c <updateLEDMatrix.5989+0x334>)
 800028c:	f001 fb0c 	bl	80018a8 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, SET);
 8000290:	2201      	movs	r2, #1
 8000292:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000296:	48b9      	ldr	r0, [pc, #740]	; (800057c <updateLEDMatrix.5989+0x334>)
 8000298:	f001 fb06 	bl	80018a8 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, SET);
 800029c:	2201      	movs	r2, #1
 800029e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002a2:	48b6      	ldr	r0, [pc, #728]	; (800057c <updateLEDMatrix.5989+0x334>)
 80002a4:	f001 fb00 	bl	80018a8 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, SET);
 80002a8:	2201      	movs	r2, #1
 80002aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002ae:	48b3      	ldr	r0, [pc, #716]	; (800057c <updateLEDMatrix.5989+0x334>)
 80002b0:	f001 fafa 	bl	80018a8 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, SET);
 80002b4:	2201      	movs	r2, #1
 80002b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002ba:	48b0      	ldr	r0, [pc, #704]	; (800057c <updateLEDMatrix.5989+0x334>)
 80002bc:	f001 faf4 	bl	80018a8 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, SET);
 80002c0:	2201      	movs	r2, #1
 80002c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002c6:	48ad      	ldr	r0, [pc, #692]	; (800057c <updateLEDMatrix.5989+0x334>)
 80002c8:	f001 faee 	bl	80018a8 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, SET);
 80002cc:	2201      	movs	r2, #1
 80002ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002d2:	48aa      	ldr	r0, [pc, #680]	; (800057c <updateLEDMatrix.5989+0x334>)
 80002d4:	f001 fae8 	bl	80018a8 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, SET);
 80002d8:	2201      	movs	r2, #1
 80002da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002de:	48a7      	ldr	r0, [pc, #668]	; (800057c <updateLEDMatrix.5989+0x334>)
 80002e0:	f001 fae2 	bl	80018a8 <HAL_GPIO_WritePin>

	  	    HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, RESET);
 80002e4:	2200      	movs	r2, #0
 80002e6:	2104      	movs	r1, #4
 80002e8:	48a5      	ldr	r0, [pc, #660]	; (8000580 <updateLEDMatrix.5989+0x338>)
 80002ea:	f001 fadd 	bl	80018a8 <HAL_GPIO_WritePin>
	  	    HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, SET);
 80002ee:	2201      	movs	r2, #1
 80002f0:	2108      	movs	r1, #8
 80002f2:	48a3      	ldr	r0, [pc, #652]	; (8000580 <updateLEDMatrix.5989+0x338>)
 80002f4:	f001 fad8 	bl	80018a8 <HAL_GPIO_WritePin>
	  	    HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, SET);
 80002f8:	2201      	movs	r2, #1
 80002fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002fe:	48a0      	ldr	r0, [pc, #640]	; (8000580 <updateLEDMatrix.5989+0x338>)
 8000300:	f001 fad2 	bl	80018a8 <HAL_GPIO_WritePin>
	  	    HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, SET);
 8000304:	2201      	movs	r2, #1
 8000306:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800030a:	489d      	ldr	r0, [pc, #628]	; (8000580 <updateLEDMatrix.5989+0x338>)
 800030c:	f001 facc 	bl	80018a8 <HAL_GPIO_WritePin>
	  	    HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, SET);
 8000310:	2201      	movs	r2, #1
 8000312:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000316:	489a      	ldr	r0, [pc, #616]	; (8000580 <updateLEDMatrix.5989+0x338>)
 8000318:	f001 fac6 	bl	80018a8 <HAL_GPIO_WritePin>
	  	    HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, SET);
 800031c:	2201      	movs	r2, #1
 800031e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000322:	4897      	ldr	r0, [pc, #604]	; (8000580 <updateLEDMatrix.5989+0x338>)
 8000324:	f001 fac0 	bl	80018a8 <HAL_GPIO_WritePin>
	  	    HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, SET);
 8000328:	2201      	movs	r2, #1
 800032a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800032e:	4894      	ldr	r0, [pc, #592]	; (8000580 <updateLEDMatrix.5989+0x338>)
 8000330:	f001 faba 	bl	80018a8 <HAL_GPIO_WritePin>
	  	    HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, SET);
 8000334:	2201      	movs	r2, #1
 8000336:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800033a:	4891      	ldr	r0, [pc, #580]	; (8000580 <updateLEDMatrix.5989+0x338>)
 800033c:	f001 fab4 	bl	80018a8 <HAL_GPIO_WritePin>
	  		  break ;
 8000340:	e29d      	b.n	800087e <updateLEDMatrix.5989+0x636>
	  	  case 1:
			HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, SET);
 8000342:	2201      	movs	r2, #1
 8000344:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000348:	488c      	ldr	r0, [pc, #560]	; (800057c <updateLEDMatrix.5989+0x334>)
 800034a:	f001 faad 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, SET);
 800034e:	2201      	movs	r2, #1
 8000350:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000354:	4889      	ldr	r0, [pc, #548]	; (800057c <updateLEDMatrix.5989+0x334>)
 8000356:	f001 faa7 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, RESET);
 800035a:	2200      	movs	r2, #0
 800035c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000360:	4886      	ldr	r0, [pc, #536]	; (800057c <updateLEDMatrix.5989+0x334>)
 8000362:	f001 faa1 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, RESET);
 8000366:	2200      	movs	r2, #0
 8000368:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800036c:	4883      	ldr	r0, [pc, #524]	; (800057c <updateLEDMatrix.5989+0x334>)
 800036e:	f001 fa9b 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, RESET);
 8000372:	2200      	movs	r2, #0
 8000374:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000378:	4880      	ldr	r0, [pc, #512]	; (800057c <updateLEDMatrix.5989+0x334>)
 800037a:	f001 fa95 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, RESET);
 800037e:	2200      	movs	r2, #0
 8000380:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000384:	487d      	ldr	r0, [pc, #500]	; (800057c <updateLEDMatrix.5989+0x334>)
 8000386:	f001 fa8f 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, RESET);
 800038a:	2200      	movs	r2, #0
 800038c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000390:	487a      	ldr	r0, [pc, #488]	; (800057c <updateLEDMatrix.5989+0x334>)
 8000392:	f001 fa89 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, RESET);
 8000396:	2200      	movs	r2, #0
 8000398:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800039c:	4877      	ldr	r0, [pc, #476]	; (800057c <updateLEDMatrix.5989+0x334>)
 800039e:	f001 fa83 	bl	80018a8 <HAL_GPIO_WritePin>

	  	    HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, SET);
 80003a2:	2201      	movs	r2, #1
 80003a4:	2104      	movs	r1, #4
 80003a6:	4876      	ldr	r0, [pc, #472]	; (8000580 <updateLEDMatrix.5989+0x338>)
 80003a8:	f001 fa7e 	bl	80018a8 <HAL_GPIO_WritePin>
	  	    HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, RESET);
 80003ac:	2200      	movs	r2, #0
 80003ae:	2108      	movs	r1, #8
 80003b0:	4873      	ldr	r0, [pc, #460]	; (8000580 <updateLEDMatrix.5989+0x338>)
 80003b2:	f001 fa79 	bl	80018a8 <HAL_GPIO_WritePin>
	  	    HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, SET);
 80003b6:	2201      	movs	r2, #1
 80003b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003bc:	4870      	ldr	r0, [pc, #448]	; (8000580 <updateLEDMatrix.5989+0x338>)
 80003be:	f001 fa73 	bl	80018a8 <HAL_GPIO_WritePin>
	  	    HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, SET);
 80003c2:	2201      	movs	r2, #1
 80003c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003c8:	486d      	ldr	r0, [pc, #436]	; (8000580 <updateLEDMatrix.5989+0x338>)
 80003ca:	f001 fa6d 	bl	80018a8 <HAL_GPIO_WritePin>
	  	    HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, SET);
 80003ce:	2201      	movs	r2, #1
 80003d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003d4:	486a      	ldr	r0, [pc, #424]	; (8000580 <updateLEDMatrix.5989+0x338>)
 80003d6:	f001 fa67 	bl	80018a8 <HAL_GPIO_WritePin>
	  	    HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, SET);
 80003da:	2201      	movs	r2, #1
 80003dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003e0:	4867      	ldr	r0, [pc, #412]	; (8000580 <updateLEDMatrix.5989+0x338>)
 80003e2:	f001 fa61 	bl	80018a8 <HAL_GPIO_WritePin>
	  	    HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, SET);
 80003e6:	2201      	movs	r2, #1
 80003e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003ec:	4864      	ldr	r0, [pc, #400]	; (8000580 <updateLEDMatrix.5989+0x338>)
 80003ee:	f001 fa5b 	bl	80018a8 <HAL_GPIO_WritePin>
	  	    HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, SET);
 80003f2:	2201      	movs	r2, #1
 80003f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003f8:	4861      	ldr	r0, [pc, #388]	; (8000580 <updateLEDMatrix.5989+0x338>)
 80003fa:	f001 fa55 	bl	80018a8 <HAL_GPIO_WritePin>
	  		  break ;
 80003fe:	e23e      	b.n	800087e <updateLEDMatrix.5989+0x636>
	  	  case 2:
		  	HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, SET);
 8000400:	2201      	movs	r2, #1
 8000402:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000406:	485d      	ldr	r0, [pc, #372]	; (800057c <updateLEDMatrix.5989+0x334>)
 8000408:	f001 fa4e 	bl	80018a8 <HAL_GPIO_WritePin>
		  	HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, RESET);
 800040c:	2200      	movs	r2, #0
 800040e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000412:	485a      	ldr	r0, [pc, #360]	; (800057c <updateLEDMatrix.5989+0x334>)
 8000414:	f001 fa48 	bl	80018a8 <HAL_GPIO_WritePin>
		  	HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, RESET);
 8000418:	2200      	movs	r2, #0
 800041a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800041e:	4857      	ldr	r0, [pc, #348]	; (800057c <updateLEDMatrix.5989+0x334>)
 8000420:	f001 fa42 	bl	80018a8 <HAL_GPIO_WritePin>
		  	HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, RESET);
 8000424:	2200      	movs	r2, #0
 8000426:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800042a:	4854      	ldr	r0, [pc, #336]	; (800057c <updateLEDMatrix.5989+0x334>)
 800042c:	f001 fa3c 	bl	80018a8 <HAL_GPIO_WritePin>
		  	HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, RESET);
 8000430:	2200      	movs	r2, #0
 8000432:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000436:	4851      	ldr	r0, [pc, #324]	; (800057c <updateLEDMatrix.5989+0x334>)
 8000438:	f001 fa36 	bl	80018a8 <HAL_GPIO_WritePin>
		  	HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, RESET);
 800043c:	2200      	movs	r2, #0
 800043e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000442:	484e      	ldr	r0, [pc, #312]	; (800057c <updateLEDMatrix.5989+0x334>)
 8000444:	f001 fa30 	bl	80018a8 <HAL_GPIO_WritePin>
		  	HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, RESET);
 8000448:	2200      	movs	r2, #0
 800044a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800044e:	484b      	ldr	r0, [pc, #300]	; (800057c <updateLEDMatrix.5989+0x334>)
 8000450:	f001 fa2a 	bl	80018a8 <HAL_GPIO_WritePin>
		  	HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, RESET);
 8000454:	2200      	movs	r2, #0
 8000456:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800045a:	4848      	ldr	r0, [pc, #288]	; (800057c <updateLEDMatrix.5989+0x334>)
 800045c:	f001 fa24 	bl	80018a8 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, SET);
 8000460:	2201      	movs	r2, #1
 8000462:	2104      	movs	r1, #4
 8000464:	4846      	ldr	r0, [pc, #280]	; (8000580 <updateLEDMatrix.5989+0x338>)
 8000466:	f001 fa1f 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, SET);
 800046a:	2201      	movs	r2, #1
 800046c:	2108      	movs	r1, #8
 800046e:	4844      	ldr	r0, [pc, #272]	; (8000580 <updateLEDMatrix.5989+0x338>)
 8000470:	f001 fa1a 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, RESET);
 8000474:	2200      	movs	r2, #0
 8000476:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800047a:	4841      	ldr	r0, [pc, #260]	; (8000580 <updateLEDMatrix.5989+0x338>)
 800047c:	f001 fa14 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, SET);
 8000480:	2201      	movs	r2, #1
 8000482:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000486:	483e      	ldr	r0, [pc, #248]	; (8000580 <updateLEDMatrix.5989+0x338>)
 8000488:	f001 fa0e 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, SET);
 800048c:	2201      	movs	r2, #1
 800048e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000492:	483b      	ldr	r0, [pc, #236]	; (8000580 <updateLEDMatrix.5989+0x338>)
 8000494:	f001 fa08 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, SET);
 8000498:	2201      	movs	r2, #1
 800049a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800049e:	4838      	ldr	r0, [pc, #224]	; (8000580 <updateLEDMatrix.5989+0x338>)
 80004a0:	f001 fa02 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, SET);
 80004a4:	2201      	movs	r2, #1
 80004a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004aa:	4835      	ldr	r0, [pc, #212]	; (8000580 <updateLEDMatrix.5989+0x338>)
 80004ac:	f001 f9fc 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, SET);
 80004b0:	2201      	movs	r2, #1
 80004b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004b6:	4832      	ldr	r0, [pc, #200]	; (8000580 <updateLEDMatrix.5989+0x338>)
 80004b8:	f001 f9f6 	bl	80018a8 <HAL_GPIO_WritePin>
	  		  break ;
 80004bc:	e1df      	b.n	800087e <updateLEDMatrix.5989+0x636>
	  	  case 3:
			HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW0_Pin, SET);
 80004be:	2201      	movs	r2, #1
 80004c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004c4:	482d      	ldr	r0, [pc, #180]	; (800057c <updateLEDMatrix.5989+0x334>)
 80004c6:	f001 f9ef 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW1_Pin, RESET);
 80004ca:	2200      	movs	r2, #0
 80004cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004d0:	482a      	ldr	r0, [pc, #168]	; (800057c <updateLEDMatrix.5989+0x334>)
 80004d2:	f001 f9e9 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW2_Pin, SET);
 80004d6:	2201      	movs	r2, #1
 80004d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004dc:	4827      	ldr	r0, [pc, #156]	; (800057c <updateLEDMatrix.5989+0x334>)
 80004de:	f001 f9e3 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW3_Pin, SET);
 80004e2:	2201      	movs	r2, #1
 80004e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004e8:	4824      	ldr	r0, [pc, #144]	; (800057c <updateLEDMatrix.5989+0x334>)
 80004ea:	f001 f9dd 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, RESET);
 80004ee:	2200      	movs	r2, #0
 80004f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004f4:	4821      	ldr	r0, [pc, #132]	; (800057c <updateLEDMatrix.5989+0x334>)
 80004f6:	f001 f9d7 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW5_Pin, SET);
 80004fa:	2201      	movs	r2, #1
 80004fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000500:	481e      	ldr	r0, [pc, #120]	; (800057c <updateLEDMatrix.5989+0x334>)
 8000502:	f001 f9d1 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW6_Pin, SET);
 8000506:	2201      	movs	r2, #1
 8000508:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800050c:	481b      	ldr	r0, [pc, #108]	; (800057c <updateLEDMatrix.5989+0x334>)
 800050e:	f001 f9cb 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW7_Pin, SET);;
 8000512:	2201      	movs	r2, #1
 8000514:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000518:	4818      	ldr	r0, [pc, #96]	; (800057c <updateLEDMatrix.5989+0x334>)
 800051a:	f001 f9c5 	bl	80018a8 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, SET);
 800051e:	2201      	movs	r2, #1
 8000520:	2104      	movs	r1, #4
 8000522:	4817      	ldr	r0, [pc, #92]	; (8000580 <updateLEDMatrix.5989+0x338>)
 8000524:	f001 f9c0 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, SET);
 8000528:	2201      	movs	r2, #1
 800052a:	2108      	movs	r1, #8
 800052c:	4814      	ldr	r0, [pc, #80]	; (8000580 <updateLEDMatrix.5989+0x338>)
 800052e:	f001 f9bb 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, SET);
 8000532:	2201      	movs	r2, #1
 8000534:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000538:	4811      	ldr	r0, [pc, #68]	; (8000580 <updateLEDMatrix.5989+0x338>)
 800053a:	f001 f9b5 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, RESET);
 800053e:	2200      	movs	r2, #0
 8000540:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000544:	480e      	ldr	r0, [pc, #56]	; (8000580 <updateLEDMatrix.5989+0x338>)
 8000546:	f001 f9af 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, SET);
 800054a:	2201      	movs	r2, #1
 800054c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000550:	480b      	ldr	r0, [pc, #44]	; (8000580 <updateLEDMatrix.5989+0x338>)
 8000552:	f001 f9a9 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, SET);
 8000556:	2201      	movs	r2, #1
 8000558:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800055c:	4808      	ldr	r0, [pc, #32]	; (8000580 <updateLEDMatrix.5989+0x338>)
 800055e:	f001 f9a3 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, SET);
 8000562:	2201      	movs	r2, #1
 8000564:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000568:	4805      	ldr	r0, [pc, #20]	; (8000580 <updateLEDMatrix.5989+0x338>)
 800056a:	f001 f99d 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, SET);
 800056e:	2201      	movs	r2, #1
 8000570:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000574:	4802      	ldr	r0, [pc, #8]	; (8000580 <updateLEDMatrix.5989+0x338>)
 8000576:	f001 f997 	bl	80018a8 <HAL_GPIO_WritePin>
	  		  break ;
 800057a:	e180      	b.n	800087e <updateLEDMatrix.5989+0x636>
 800057c:	40010c00 	.word	0x40010c00
 8000580:	40010800 	.word	0x40010800
	  	  case 4:
			HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW0_Pin, SET);
 8000584:	2201      	movs	r2, #1
 8000586:	f44f 7180 	mov.w	r1, #256	; 0x100
 800058a:	48bf      	ldr	r0, [pc, #764]	; (8000888 <updateLEDMatrix.5989+0x640>)
 800058c:	f001 f98c 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW1_Pin, RESET);
 8000590:	2200      	movs	r2, #0
 8000592:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000596:	48bc      	ldr	r0, [pc, #752]	; (8000888 <updateLEDMatrix.5989+0x640>)
 8000598:	f001 f986 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW2_Pin, SET);
 800059c:	2201      	movs	r2, #1
 800059e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005a2:	48b9      	ldr	r0, [pc, #740]	; (8000888 <updateLEDMatrix.5989+0x640>)
 80005a4:	f001 f980 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW3_Pin, SET);
 80005a8:	2201      	movs	r2, #1
 80005aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005ae:	48b6      	ldr	r0, [pc, #728]	; (8000888 <updateLEDMatrix.5989+0x640>)
 80005b0:	f001 f97a 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, RESET);
 80005b4:	2200      	movs	r2, #0
 80005b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ba:	48b3      	ldr	r0, [pc, #716]	; (8000888 <updateLEDMatrix.5989+0x640>)
 80005bc:	f001 f974 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW5_Pin, SET);
 80005c0:	2201      	movs	r2, #1
 80005c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c6:	48b0      	ldr	r0, [pc, #704]	; (8000888 <updateLEDMatrix.5989+0x640>)
 80005c8:	f001 f96e 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW6_Pin, SET);
 80005cc:	2201      	movs	r2, #1
 80005ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005d2:	48ad      	ldr	r0, [pc, #692]	; (8000888 <updateLEDMatrix.5989+0x640>)
 80005d4:	f001 f968 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW7_Pin, SET);
 80005d8:	2201      	movs	r2, #1
 80005da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005de:	48aa      	ldr	r0, [pc, #680]	; (8000888 <updateLEDMatrix.5989+0x640>)
 80005e0:	f001 f962 	bl	80018a8 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, SET);
 80005e4:	2201      	movs	r2, #1
 80005e6:	2104      	movs	r1, #4
 80005e8:	48a8      	ldr	r0, [pc, #672]	; (800088c <updateLEDMatrix.5989+0x644>)
 80005ea:	f001 f95d 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, SET);
 80005ee:	2201      	movs	r2, #1
 80005f0:	2108      	movs	r1, #8
 80005f2:	48a6      	ldr	r0, [pc, #664]	; (800088c <updateLEDMatrix.5989+0x644>)
 80005f4:	f001 f958 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, SET);
 80005f8:	2201      	movs	r2, #1
 80005fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005fe:	48a3      	ldr	r0, [pc, #652]	; (800088c <updateLEDMatrix.5989+0x644>)
 8000600:	f001 f952 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, SET);
 8000604:	2201      	movs	r2, #1
 8000606:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800060a:	48a0      	ldr	r0, [pc, #640]	; (800088c <updateLEDMatrix.5989+0x644>)
 800060c:	f001 f94c 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, RESET);
 8000610:	2200      	movs	r2, #0
 8000612:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000616:	489d      	ldr	r0, [pc, #628]	; (800088c <updateLEDMatrix.5989+0x644>)
 8000618:	f001 f946 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, SET);
 800061c:	2201      	movs	r2, #1
 800061e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000622:	489a      	ldr	r0, [pc, #616]	; (800088c <updateLEDMatrix.5989+0x644>)
 8000624:	f001 f940 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, SET);
 8000628:	2201      	movs	r2, #1
 800062a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800062e:	4897      	ldr	r0, [pc, #604]	; (800088c <updateLEDMatrix.5989+0x644>)
 8000630:	f001 f93a 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, SET);
 8000634:	2201      	movs	r2, #1
 8000636:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800063a:	4894      	ldr	r0, [pc, #592]	; (800088c <updateLEDMatrix.5989+0x644>)
 800063c:	f001 f934 	bl	80018a8 <HAL_GPIO_WritePin>
	  		  break ;
 8000640:	e11d      	b.n	800087e <updateLEDMatrix.5989+0x636>
	  	  case 5:
	  		HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, SET);
 8000642:	2201      	movs	r2, #1
 8000644:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000648:	488f      	ldr	r0, [pc, #572]	; (8000888 <updateLEDMatrix.5989+0x640>)
 800064a:	f001 f92d 	bl	80018a8 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, RESET);
 800064e:	2200      	movs	r2, #0
 8000650:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000654:	488c      	ldr	r0, [pc, #560]	; (8000888 <updateLEDMatrix.5989+0x640>)
 8000656:	f001 f927 	bl	80018a8 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, RESET);
 800065a:	2200      	movs	r2, #0
 800065c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000660:	4889      	ldr	r0, [pc, #548]	; (8000888 <updateLEDMatrix.5989+0x640>)
 8000662:	f001 f921 	bl	80018a8 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800066c:	4886      	ldr	r0, [pc, #536]	; (8000888 <updateLEDMatrix.5989+0x640>)
 800066e:	f001 f91b 	bl	80018a8 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, RESET);
 8000672:	2200      	movs	r2, #0
 8000674:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000678:	4883      	ldr	r0, [pc, #524]	; (8000888 <updateLEDMatrix.5989+0x640>)
 800067a:	f001 f915 	bl	80018a8 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000684:	4880      	ldr	r0, [pc, #512]	; (8000888 <updateLEDMatrix.5989+0x640>)
 8000686:	f001 f90f 	bl	80018a8 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000690:	487d      	ldr	r0, [pc, #500]	; (8000888 <updateLEDMatrix.5989+0x640>)
 8000692:	f001 f909 	bl	80018a8 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, RESET);
 8000696:	2200      	movs	r2, #0
 8000698:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800069c:	487a      	ldr	r0, [pc, #488]	; (8000888 <updateLEDMatrix.5989+0x640>)
 800069e:	f001 f903 	bl	80018a8 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, SET);
 80006a2:	2201      	movs	r2, #1
 80006a4:	2104      	movs	r1, #4
 80006a6:	4879      	ldr	r0, [pc, #484]	; (800088c <updateLEDMatrix.5989+0x644>)
 80006a8:	f001 f8fe 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, SET);
 80006ac:	2201      	movs	r2, #1
 80006ae:	2108      	movs	r1, #8
 80006b0:	4876      	ldr	r0, [pc, #472]	; (800088c <updateLEDMatrix.5989+0x644>)
 80006b2:	f001 f8f9 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, SET);
 80006b6:	2201      	movs	r2, #1
 80006b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006bc:	4873      	ldr	r0, [pc, #460]	; (800088c <updateLEDMatrix.5989+0x644>)
 80006be:	f001 f8f3 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, SET);
 80006c2:	2201      	movs	r2, #1
 80006c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006c8:	4870      	ldr	r0, [pc, #448]	; (800088c <updateLEDMatrix.5989+0x644>)
 80006ca:	f001 f8ed 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, SET);
 80006ce:	2201      	movs	r2, #1
 80006d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006d4:	486d      	ldr	r0, [pc, #436]	; (800088c <updateLEDMatrix.5989+0x644>)
 80006d6:	f001 f8e7 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, RESET);
 80006da:	2200      	movs	r2, #0
 80006dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006e0:	486a      	ldr	r0, [pc, #424]	; (800088c <updateLEDMatrix.5989+0x644>)
 80006e2:	f001 f8e1 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, SET);
 80006e6:	2201      	movs	r2, #1
 80006e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006ec:	4867      	ldr	r0, [pc, #412]	; (800088c <updateLEDMatrix.5989+0x644>)
 80006ee:	f001 f8db 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, SET);
 80006f2:	2201      	movs	r2, #1
 80006f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006f8:	4864      	ldr	r0, [pc, #400]	; (800088c <updateLEDMatrix.5989+0x644>)
 80006fa:	f001 f8d5 	bl	80018a8 <HAL_GPIO_WritePin>
	  		  break ;
 80006fe:	e0be      	b.n	800087e <updateLEDMatrix.5989+0x636>
	  	  case 6:
			HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, SET);
 8000700:	2201      	movs	r2, #1
 8000702:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000706:	4860      	ldr	r0, [pc, #384]	; (8000888 <updateLEDMatrix.5989+0x640>)
 8000708:	f001 f8ce 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, SET);
 800070c:	2201      	movs	r2, #1
 800070e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000712:	485d      	ldr	r0, [pc, #372]	; (8000888 <updateLEDMatrix.5989+0x640>)
 8000714:	f001 f8c8 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, RESET);
 8000718:	2200      	movs	r2, #0
 800071a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800071e:	485a      	ldr	r0, [pc, #360]	; (8000888 <updateLEDMatrix.5989+0x640>)
 8000720:	f001 f8c2 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, RESET);
 8000724:	2200      	movs	r2, #0
 8000726:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800072a:	4857      	ldr	r0, [pc, #348]	; (8000888 <updateLEDMatrix.5989+0x640>)
 800072c:	f001 f8bc 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, RESET);
 8000730:	2200      	movs	r2, #0
 8000732:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000736:	4854      	ldr	r0, [pc, #336]	; (8000888 <updateLEDMatrix.5989+0x640>)
 8000738:	f001 f8b6 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, RESET);
 800073c:	2200      	movs	r2, #0
 800073e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000742:	4851      	ldr	r0, [pc, #324]	; (8000888 <updateLEDMatrix.5989+0x640>)
 8000744:	f001 f8b0 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, RESET);
 8000748:	2200      	movs	r2, #0
 800074a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800074e:	484e      	ldr	r0, [pc, #312]	; (8000888 <updateLEDMatrix.5989+0x640>)
 8000750:	f001 f8aa 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, RESET);
 8000754:	2200      	movs	r2, #0
 8000756:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800075a:	484b      	ldr	r0, [pc, #300]	; (8000888 <updateLEDMatrix.5989+0x640>)
 800075c:	f001 f8a4 	bl	80018a8 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, SET);
 8000760:	2201      	movs	r2, #1
 8000762:	2104      	movs	r1, #4
 8000764:	4849      	ldr	r0, [pc, #292]	; (800088c <updateLEDMatrix.5989+0x644>)
 8000766:	f001 f89f 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, SET);
 800076a:	2201      	movs	r2, #1
 800076c:	2108      	movs	r1, #8
 800076e:	4847      	ldr	r0, [pc, #284]	; (800088c <updateLEDMatrix.5989+0x644>)
 8000770:	f001 f89a 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, SET);
 8000774:	2201      	movs	r2, #1
 8000776:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800077a:	4844      	ldr	r0, [pc, #272]	; (800088c <updateLEDMatrix.5989+0x644>)
 800077c:	f001 f894 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, SET);
 8000780:	2201      	movs	r2, #1
 8000782:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000786:	4841      	ldr	r0, [pc, #260]	; (800088c <updateLEDMatrix.5989+0x644>)
 8000788:	f001 f88e 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, SET);
 800078c:	2201      	movs	r2, #1
 800078e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000792:	483e      	ldr	r0, [pc, #248]	; (800088c <updateLEDMatrix.5989+0x644>)
 8000794:	f001 f888 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, SET);
 8000798:	2201      	movs	r2, #1
 800079a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800079e:	483b      	ldr	r0, [pc, #236]	; (800088c <updateLEDMatrix.5989+0x644>)
 80007a0:	f001 f882 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, RESET);
 80007a4:	2200      	movs	r2, #0
 80007a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007aa:	4838      	ldr	r0, [pc, #224]	; (800088c <updateLEDMatrix.5989+0x644>)
 80007ac:	f001 f87c 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, SET);
 80007b0:	2201      	movs	r2, #1
 80007b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007b6:	4835      	ldr	r0, [pc, #212]	; (800088c <updateLEDMatrix.5989+0x644>)
 80007b8:	f001 f876 	bl	80018a8 <HAL_GPIO_WritePin>
	  		  break ;
 80007bc:	e05f      	b.n	800087e <updateLEDMatrix.5989+0x636>
	  	  case 7:
			HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, SET);
 80007be:	2201      	movs	r2, #1
 80007c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007c4:	4830      	ldr	r0, [pc, #192]	; (8000888 <updateLEDMatrix.5989+0x640>)
 80007c6:	f001 f86f 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, SET);
 80007ca:	2201      	movs	r2, #1
 80007cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007d0:	482d      	ldr	r0, [pc, #180]	; (8000888 <updateLEDMatrix.5989+0x640>)
 80007d2:	f001 f869 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, SET);
 80007d6:	2201      	movs	r2, #1
 80007d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007dc:	482a      	ldr	r0, [pc, #168]	; (8000888 <updateLEDMatrix.5989+0x640>)
 80007de:	f001 f863 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, SET);
 80007e2:	2201      	movs	r2, #1
 80007e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007e8:	4827      	ldr	r0, [pc, #156]	; (8000888 <updateLEDMatrix.5989+0x640>)
 80007ea:	f001 f85d 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, SET);
 80007ee:	2201      	movs	r2, #1
 80007f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007f4:	4824      	ldr	r0, [pc, #144]	; (8000888 <updateLEDMatrix.5989+0x640>)
 80007f6:	f001 f857 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, SET);
 80007fa:	2201      	movs	r2, #1
 80007fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000800:	4821      	ldr	r0, [pc, #132]	; (8000888 <updateLEDMatrix.5989+0x640>)
 8000802:	f001 f851 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, SET);
 8000806:	2201      	movs	r2, #1
 8000808:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800080c:	481e      	ldr	r0, [pc, #120]	; (8000888 <updateLEDMatrix.5989+0x640>)
 800080e:	f001 f84b 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, SET);
 8000812:	2201      	movs	r2, #1
 8000814:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000818:	481b      	ldr	r0, [pc, #108]	; (8000888 <updateLEDMatrix.5989+0x640>)
 800081a:	f001 f845 	bl	80018a8 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, SET);
 800081e:	2201      	movs	r2, #1
 8000820:	2104      	movs	r1, #4
 8000822:	481a      	ldr	r0, [pc, #104]	; (800088c <updateLEDMatrix.5989+0x644>)
 8000824:	f001 f840 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, SET);
 8000828:	2201      	movs	r2, #1
 800082a:	2108      	movs	r1, #8
 800082c:	4817      	ldr	r0, [pc, #92]	; (800088c <updateLEDMatrix.5989+0x644>)
 800082e:	f001 f83b 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, SET);
 8000832:	2201      	movs	r2, #1
 8000834:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000838:	4814      	ldr	r0, [pc, #80]	; (800088c <updateLEDMatrix.5989+0x644>)
 800083a:	f001 f835 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, SET);
 800083e:	2201      	movs	r2, #1
 8000840:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000844:	4811      	ldr	r0, [pc, #68]	; (800088c <updateLEDMatrix.5989+0x644>)
 8000846:	f001 f82f 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, SET);
 800084a:	2201      	movs	r2, #1
 800084c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000850:	480e      	ldr	r0, [pc, #56]	; (800088c <updateLEDMatrix.5989+0x644>)
 8000852:	f001 f829 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, SET);
 8000856:	2201      	movs	r2, #1
 8000858:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800085c:	480b      	ldr	r0, [pc, #44]	; (800088c <updateLEDMatrix.5989+0x644>)
 800085e:	f001 f823 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, SET);
 8000862:	2201      	movs	r2, #1
 8000864:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000868:	4808      	ldr	r0, [pc, #32]	; (800088c <updateLEDMatrix.5989+0x644>)
 800086a:	f001 f81d 	bl	80018a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000874:	4805      	ldr	r0, [pc, #20]	; (800088c <updateLEDMatrix.5989+0x644>)
 8000876:	f001 f817 	bl	80018a8 <HAL_GPIO_WritePin>
	  		  break ;
 800087a:	e000      	b.n	800087e <updateLEDMatrix.5989+0x636>
	  	  default :
	  		  break ;
 800087c:	bf00      	nop
	  }
  }
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40010c00 	.word	0x40010c00
 800088c:	40010800 	.word	0x40010800

08000890 <main>:
{
 8000890:	b590      	push	{r4, r7, lr}
 8000892:	b093      	sub	sp, #76	; 0x4c
 8000894:	af00      	add	r7, sp, #0
int main(void)
 8000896:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800089a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Init();
 800089c:	f000 fd1a 	bl	80012d4 <HAL_Init>
  SystemClock_Config();
 80008a0:	f000 fb76 	bl	8000f90 <SystemClock_Config>
  MX_GPIO_Init();
 80008a4:	f000 fbfc 	bl	80010a0 <MX_GPIO_Init>
  MX_TIM2_Init();
 80008a8:	f000 fbae 	bl	8001008 <MX_TIM2_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 80008ac:	4879      	ldr	r0, [pc, #484]	; (8000a94 <main+0x204>)
 80008ae:	f001 fc59 	bl	8002164 <HAL_TIM_Base_Start_IT>
  int hour = 15, minute = 8, second =50;
 80008b2:	230f      	movs	r3, #15
 80008b4:	613b      	str	r3, [r7, #16]
 80008b6:	2308      	movs	r3, #8
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	2332      	movs	r3, #50	; 0x32
 80008bc:	647b      	str	r3, [r7, #68]	; 0x44
  const int MAX_LED = 4;
 80008be:	2304      	movs	r3, #4
 80008c0:	633b      	str	r3, [r7, #48]	; 0x30
  int index_led = 0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	643b      	str	r3, [r7, #64]	; 0x40
  int led_buffer [4] = {1, 2, 3, 4};
 80008c6:	4b74      	ldr	r3, [pc, #464]	; (8000a98 <main+0x208>)
 80008c8:	f107 0414 	add.w	r4, r7, #20
 80008cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  int count_frame =0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  const int MAX_FRAME = 14;
 80008d6:	230e      	movs	r3, #14
 80008d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  int count_col =0;
 80008da:	2300      	movs	r3, #0
 80008dc:	63bb      	str	r3, [r7, #56]	; 0x38
  const int MAX_LED_MATRIX = 8;
 80008de:	2308      	movs	r3, #8
 80008e0:	62bb      	str	r3, [r7, #40]	; 0x28
  int index_led_matrix = 0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	637b      	str	r3, [r7, #52]	; 0x34
  uint8_t matrix_buffer[8] = {0x01 , 0x02 , 0x03 , 0x04 , 0x05 , 0x06 , 0x07 , 0x08 };
 80008e6:	4a6d      	ldr	r2, [pc, #436]	; (8000a9c <main+0x20c>)
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008ee:	e883 0003 	stmia.w	r3, {r0, r1}
		  }
	  }
	  HAL_GPIO_WritePin(GPIOA, cols[count_col], RESET);
  }*/

  setTimerDot(100);
 80008f2:	2064      	movs	r0, #100	; 0x64
 80008f4:	f7ff fc52 	bl	800019c <setTimerDot>
  setTimerSwitch(25);
 80008f8:	2019      	movs	r0, #25
 80008fa:	f7ff fc3b 	bl	8000174 <setTimerSwitch>
  setTimerMatrix(100);
 80008fe:	2064      	movs	r0, #100	; 0x64
 8000900:	f7ff fc24 	bl	800014c <setTimerMatrix>

  update7SEG(index_led);
 8000904:	f107 030c 	add.w	r3, r7, #12
 8000908:	469c      	mov	ip, r3
 800090a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800090c:	f000 fa64 	bl	8000dd8 <update7SEG.6017>
  updateLEDMatrix(index_led_matrix);
 8000910:	f107 030c 	add.w	r3, r7, #12
 8000914:	469c      	mov	ip, r3
 8000916:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000918:	f7ff fc96 	bl	8000248 <updateLEDMatrix.5989>

  HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, SET);
 800091c:	2201      	movs	r2, #1
 800091e:	2104      	movs	r1, #4
 8000920:	485f      	ldr	r0, [pc, #380]	; (8000aa0 <main+0x210>)
 8000922:	f000 ffc1 	bl	80018a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, RESET);
 8000926:	2200      	movs	r2, #0
 8000928:	2108      	movs	r1, #8
 800092a:	485d      	ldr	r0, [pc, #372]	; (8000aa0 <main+0x210>)
 800092c:	f000 ffbc 	bl	80018a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, RESET);
 8000930:	2200      	movs	r2, #0
 8000932:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000936:	485a      	ldr	r0, [pc, #360]	; (8000aa0 <main+0x210>)
 8000938:	f000 ffb6 	bl	80018a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, RESET);
 800093c:	2200      	movs	r2, #0
 800093e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000942:	4857      	ldr	r0, [pc, #348]	; (8000aa0 <main+0x210>)
 8000944:	f000 ffb0 	bl	80018a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, RESET);
 8000948:	2200      	movs	r2, #0
 800094a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800094e:	4854      	ldr	r0, [pc, #336]	; (8000aa0 <main+0x210>)
 8000950:	f000 ffaa 	bl	80018a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, RESET);
 8000954:	2200      	movs	r2, #0
 8000956:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800095a:	4851      	ldr	r0, [pc, #324]	; (8000aa0 <main+0x210>)
 800095c:	f000 ffa4 	bl	80018a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, RESET);
 8000960:	2200      	movs	r2, #0
 8000962:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000966:	484e      	ldr	r0, [pc, #312]	; (8000aa0 <main+0x210>)
 8000968:	f000 ff9e 	bl	80018a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, RESET);
 800096c:	2200      	movs	r2, #0
 800096e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000972:	484b      	ldr	r0, [pc, #300]	; (8000aa0 <main+0x210>)
 8000974:	f000 ff98 	bl	80018a8 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000978:	2200      	movs	r2, #0
 800097a:	2101      	movs	r1, #1
 800097c:	4849      	ldr	r0, [pc, #292]	; (8000aa4 <main+0x214>)
 800097e:	f000 ff93 	bl	80018a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	2102      	movs	r1, #2
 8000986:	4847      	ldr	r0, [pc, #284]	; (8000aa4 <main+0x214>)
 8000988:	f000 ff8e 	bl	80018a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 800098c:	2200      	movs	r2, #0
 800098e:	2104      	movs	r1, #4
 8000990:	4844      	ldr	r0, [pc, #272]	; (8000aa4 <main+0x214>)
 8000992:	f000 ff89 	bl	80018a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	2108      	movs	r1, #8
 800099a:	4842      	ldr	r0, [pc, #264]	; (8000aa4 <main+0x214>)
 800099c:	f000 ff84 	bl	80018a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2110      	movs	r1, #16
 80009a4:	483f      	ldr	r0, [pc, #252]	; (8000aa4 <main+0x214>)
 80009a6:	f000 ff7f 	bl	80018a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2120      	movs	r1, #32
 80009ae:	483d      	ldr	r0, [pc, #244]	; (8000aa4 <main+0x214>)
 80009b0:	f000 ff7a 	bl	80018a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 80009b4:	2201      	movs	r2, #1
 80009b6:	2140      	movs	r1, #64	; 0x40
 80009b8:	483a      	ldr	r0, [pc, #232]	; (8000aa4 <main+0x214>)
 80009ba:	f000 ff75 	bl	80018a8 <HAL_GPIO_WritePin>

  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  if(matrix_flag == 1){
 80009be:	4b3a      	ldr	r3, [pc, #232]	; (8000aa8 <main+0x218>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d123      	bne.n	8000a0e <main+0x17e>
		  index_led_matrix++;
 80009c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009c8:	3301      	adds	r3, #1
 80009ca:	637b      	str	r3, [r7, #52]	; 0x34
		  count_col++;
 80009cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009ce:	3301      	adds	r3, #1
 80009d0:	63bb      	str	r3, [r7, #56]	; 0x38
		  if(index_led_matrix >= MAX_LED_MATRIX){
 80009d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80009d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009d6:	429a      	cmp	r2, r3
 80009d8:	db01      	blt.n	80009de <main+0x14e>
			  index_led_matrix = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	637b      	str	r3, [r7, #52]	; 0x34
		  }

		  if(count_col >= MAX_LED_MATRIX){
 80009de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80009e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009e2:	429a      	cmp	r2, r3
 80009e4:	db04      	blt.n	80009f0 <main+0x160>
			  count_col = 0;
 80009e6:	2300      	movs	r3, #0
 80009e8:	63bb      	str	r3, [r7, #56]	; 0x38
			  count_frame++;
 80009ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80009ec:	3301      	adds	r3, #1
 80009ee:	63fb      	str	r3, [r7, #60]	; 0x3c
		  }

		  if(count_frame >= MAX_FRAME)
 80009f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80009f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009f4:	429a      	cmp	r2, r3
 80009f6:	db01      	blt.n	80009fc <main+0x16c>
			  count_frame =0;
 80009f8:	2300      	movs	r3, #0
 80009fa:	63fb      	str	r3, [r7, #60]	; 0x3c
		  //update_frame();
		  updateLEDMatrix(index_led_matrix);
 80009fc:	f107 030c 	add.w	r3, r7, #12
 8000a00:	469c      	mov	ip, r3
 8000a02:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000a04:	f7ff fc20 	bl	8000248 <updateLEDMatrix.5989>
		  setTimerMatrix(5);
 8000a08:	2005      	movs	r0, #5
 8000a0a:	f7ff fb9f 	bl	800014c <setTimerMatrix>
	  }

	  if(dot_flag == 1){
 8000a0e:	4b27      	ldr	r3, [pc, #156]	; (8000aac <main+0x21c>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d10d      	bne.n	8000a32 <main+0x1a2>
		  second++;
 8000a16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a18:	3301      	adds	r3, #1
 8000a1a:	647b      	str	r3, [r7, #68]	; 0x44
		  HAL_GPIO_TogglePin(DOT_GPIO_Port, DOT_Pin);
 8000a1c:	2110      	movs	r1, #16
 8000a1e:	4820      	ldr	r0, [pc, #128]	; (8000aa0 <main+0x210>)
 8000a20:	f000 ff5a 	bl	80018d8 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000a24:	2120      	movs	r1, #32
 8000a26:	481e      	ldr	r0, [pc, #120]	; (8000aa0 <main+0x210>)
 8000a28:	f000 ff56 	bl	80018d8 <HAL_GPIO_TogglePin>
		  setTimerDot(100);
 8000a2c:	2064      	movs	r0, #100	; 0x64
 8000a2e:	f7ff fbb5 	bl	800019c <setTimerDot>
	  }

	  if(switch_flag == 1){
 8000a32:	4b1f      	ldr	r3, [pc, #124]	; (8000ab0 <main+0x220>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d111      	bne.n	8000a5e <main+0x1ce>
		  index_led++;
 8000a3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	643b      	str	r3, [r7, #64]	; 0x40
		  if(index_led >= MAX_LED)
 8000a40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a44:	429a      	cmp	r2, r3
 8000a46:	db01      	blt.n	8000a4c <main+0x1bc>
			  index_led =0;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	643b      	str	r3, [r7, #64]	; 0x40
		  update7SEG(index_led);
 8000a4c:	f107 030c 	add.w	r3, r7, #12
 8000a50:	469c      	mov	ip, r3
 8000a52:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000a54:	f000 f9c0 	bl	8000dd8 <update7SEG.6017>
		  setTimerSwitch(25);
 8000a58:	2019      	movs	r0, #25
 8000a5a:	f7ff fb8b 	bl	8000174 <setTimerSwitch>
	  }

	  if ( second >= 60) {
 8000a5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a60:	2b3b      	cmp	r3, #59	; 0x3b
 8000a62:	dd04      	ble.n	8000a6e <main+0x1de>
	  second = 0;
 8000a64:	2300      	movs	r3, #0
 8000a66:	647b      	str	r3, [r7, #68]	; 0x44
	  minute ++;
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	60fb      	str	r3, [r7, #12]
	  }

	  if( minute >= 60) {
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	2b3b      	cmp	r3, #59	; 0x3b
 8000a72:	dd04      	ble.n	8000a7e <main+0x1ee>
	  minute = 0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	60fb      	str	r3, [r7, #12]
	  hour ++;
 8000a78:	693b      	ldr	r3, [r7, #16]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	613b      	str	r3, [r7, #16]
	  }

	  if( hour >=24){
 8000a7e:	693b      	ldr	r3, [r7, #16]
 8000a80:	2b17      	cmp	r3, #23
 8000a82:	dd01      	ble.n	8000a88 <main+0x1f8>
	  hour = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	613b      	str	r3, [r7, #16]
	  }

	  updateClockBuffer ();
 8000a88:	f107 030c 	add.w	r3, r7, #12
 8000a8c:	469c      	mov	ip, r3
 8000a8e:	f000 fa31 	bl	8000ef4 <updateClockBuffer.6025>
	  if(matrix_flag == 1){
 8000a92:	e794      	b.n	80009be <main+0x12e>
 8000a94:	20000040 	.word	0x20000040
 8000a98:	08002904 	.word	0x08002904
 8000a9c:	08002914 	.word	0x08002914
 8000aa0:	40010800 	.word	0x40010800
 8000aa4:	40010c00 	.word	0x40010c00
 8000aa8:	2000003c 	.word	0x2000003c
 8000aac:	2000002c 	.word	0x2000002c
 8000ab0:	20000034 	.word	0x20000034

08000ab4 <display7SEG.6002>:
  {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	f8c7 c000 	str.w	ip, [r7]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2b09      	cmp	r3, #9
 8000ac4:	f200 8180 	bhi.w	8000dc8 <display7SEG.6002+0x314>
 8000ac8:	a201      	add	r2, pc, #4	; (adr r2, 8000ad0 <display7SEG.6002+0x1c>)
 8000aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ace:	bf00      	nop
 8000ad0:	08000af9 	.word	0x08000af9
 8000ad4:	08000b41 	.word	0x08000b41
 8000ad8:	08000b89 	.word	0x08000b89
 8000adc:	08000bd1 	.word	0x08000bd1
 8000ae0:	08000c19 	.word	0x08000c19
 8000ae4:	08000c61 	.word	0x08000c61
 8000ae8:	08000ca9 	.word	0x08000ca9
 8000aec:	08000cf1 	.word	0x08000cf1
 8000af0:	08000d39 	.word	0x08000d39
 8000af4:	08000d81 	.word	0x08000d81
  			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000af8:	2200      	movs	r2, #0
 8000afa:	2101      	movs	r1, #1
 8000afc:	48b5      	ldr	r0, [pc, #724]	; (8000dd4 <display7SEG.6002+0x320>)
 8000afe:	f000 fed3 	bl	80018a8 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000b02:	2200      	movs	r2, #0
 8000b04:	2102      	movs	r1, #2
 8000b06:	48b3      	ldr	r0, [pc, #716]	; (8000dd4 <display7SEG.6002+0x320>)
 8000b08:	f000 fece 	bl	80018a8 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	2104      	movs	r1, #4
 8000b10:	48b0      	ldr	r0, [pc, #704]	; (8000dd4 <display7SEG.6002+0x320>)
 8000b12:	f000 fec9 	bl	80018a8 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2108      	movs	r1, #8
 8000b1a:	48ae      	ldr	r0, [pc, #696]	; (8000dd4 <display7SEG.6002+0x320>)
 8000b1c:	f000 fec4 	bl	80018a8 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000b20:	2200      	movs	r2, #0
 8000b22:	2110      	movs	r1, #16
 8000b24:	48ab      	ldr	r0, [pc, #684]	; (8000dd4 <display7SEG.6002+0x320>)
 8000b26:	f000 febf 	bl	80018a8 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2120      	movs	r1, #32
 8000b2e:	48a9      	ldr	r0, [pc, #676]	; (8000dd4 <display7SEG.6002+0x320>)
 8000b30:	f000 feba 	bl	80018a8 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 8000b34:	2201      	movs	r2, #1
 8000b36:	2140      	movs	r1, #64	; 0x40
 8000b38:	48a6      	ldr	r0, [pc, #664]	; (8000dd4 <display7SEG.6002+0x320>)
 8000b3a:	f000 feb5 	bl	80018a8 <HAL_GPIO_WritePin>
  			break;
 8000b3e:	e144      	b.n	8000dca <display7SEG.6002+0x316>
  			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 8000b40:	2201      	movs	r2, #1
 8000b42:	2101      	movs	r1, #1
 8000b44:	48a3      	ldr	r0, [pc, #652]	; (8000dd4 <display7SEG.6002+0x320>)
 8000b46:	f000 feaf 	bl	80018a8 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2102      	movs	r1, #2
 8000b4e:	48a1      	ldr	r0, [pc, #644]	; (8000dd4 <display7SEG.6002+0x320>)
 8000b50:	f000 feaa 	bl	80018a8 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000b54:	2200      	movs	r2, #0
 8000b56:	2104      	movs	r1, #4
 8000b58:	489e      	ldr	r0, [pc, #632]	; (8000dd4 <display7SEG.6002+0x320>)
 8000b5a:	f000 fea5 	bl	80018a8 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 8000b5e:	2201      	movs	r2, #1
 8000b60:	2108      	movs	r1, #8
 8000b62:	489c      	ldr	r0, [pc, #624]	; (8000dd4 <display7SEG.6002+0x320>)
 8000b64:	f000 fea0 	bl	80018a8 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000b68:	2201      	movs	r2, #1
 8000b6a:	2110      	movs	r1, #16
 8000b6c:	4899      	ldr	r0, [pc, #612]	; (8000dd4 <display7SEG.6002+0x320>)
 8000b6e:	f000 fe9b 	bl	80018a8 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000b72:	2201      	movs	r2, #1
 8000b74:	2120      	movs	r1, #32
 8000b76:	4897      	ldr	r0, [pc, #604]	; (8000dd4 <display7SEG.6002+0x320>)
 8000b78:	f000 fe96 	bl	80018a8 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	2140      	movs	r1, #64	; 0x40
 8000b80:	4894      	ldr	r0, [pc, #592]	; (8000dd4 <display7SEG.6002+0x320>)
 8000b82:	f000 fe91 	bl	80018a8 <HAL_GPIO_WritePin>
  			break;
 8000b86:	e120      	b.n	8000dca <display7SEG.6002+0x316>
  			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2101      	movs	r1, #1
 8000b8c:	4891      	ldr	r0, [pc, #580]	; (8000dd4 <display7SEG.6002+0x320>)
 8000b8e:	f000 fe8b 	bl	80018a8 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2102      	movs	r1, #2
 8000b96:	488f      	ldr	r0, [pc, #572]	; (8000dd4 <display7SEG.6002+0x320>)
 8000b98:	f000 fe86 	bl	80018a8 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, SET);
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	2104      	movs	r1, #4
 8000ba0:	488c      	ldr	r0, [pc, #560]	; (8000dd4 <display7SEG.6002+0x320>)
 8000ba2:	f000 fe81 	bl	80018a8 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2108      	movs	r1, #8
 8000baa:	488a      	ldr	r0, [pc, #552]	; (8000dd4 <display7SEG.6002+0x320>)
 8000bac:	f000 fe7c 	bl	80018a8 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2110      	movs	r1, #16
 8000bb4:	4887      	ldr	r0, [pc, #540]	; (8000dd4 <display7SEG.6002+0x320>)
 8000bb6:	f000 fe77 	bl	80018a8 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000bba:	2201      	movs	r2, #1
 8000bbc:	2120      	movs	r1, #32
 8000bbe:	4885      	ldr	r0, [pc, #532]	; (8000dd4 <display7SEG.6002+0x320>)
 8000bc0:	f000 fe72 	bl	80018a8 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2140      	movs	r1, #64	; 0x40
 8000bc8:	4882      	ldr	r0, [pc, #520]	; (8000dd4 <display7SEG.6002+0x320>)
 8000bca:	f000 fe6d 	bl	80018a8 <HAL_GPIO_WritePin>
  			break;
 8000bce:	e0fc      	b.n	8000dca <display7SEG.6002+0x316>
  			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2101      	movs	r1, #1
 8000bd4:	487f      	ldr	r0, [pc, #508]	; (8000dd4 <display7SEG.6002+0x320>)
 8000bd6:	f000 fe67 	bl	80018a8 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2102      	movs	r1, #2
 8000bde:	487d      	ldr	r0, [pc, #500]	; (8000dd4 <display7SEG.6002+0x320>)
 8000be0:	f000 fe62 	bl	80018a8 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000be4:	2200      	movs	r2, #0
 8000be6:	2104      	movs	r1, #4
 8000be8:	487a      	ldr	r0, [pc, #488]	; (8000dd4 <display7SEG.6002+0x320>)
 8000bea:	f000 fe5d 	bl	80018a8 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2108      	movs	r1, #8
 8000bf2:	4878      	ldr	r0, [pc, #480]	; (8000dd4 <display7SEG.6002+0x320>)
 8000bf4:	f000 fe58 	bl	80018a8 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	2110      	movs	r1, #16
 8000bfc:	4875      	ldr	r0, [pc, #468]	; (8000dd4 <display7SEG.6002+0x320>)
 8000bfe:	f000 fe53 	bl	80018a8 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000c02:	2201      	movs	r2, #1
 8000c04:	2120      	movs	r1, #32
 8000c06:	4873      	ldr	r0, [pc, #460]	; (8000dd4 <display7SEG.6002+0x320>)
 8000c08:	f000 fe4e 	bl	80018a8 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	2140      	movs	r1, #64	; 0x40
 8000c10:	4870      	ldr	r0, [pc, #448]	; (8000dd4 <display7SEG.6002+0x320>)
 8000c12:	f000 fe49 	bl	80018a8 <HAL_GPIO_WritePin>
  			break;
 8000c16:	e0d8      	b.n	8000dca <display7SEG.6002+0x316>
  			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 8000c18:	2201      	movs	r2, #1
 8000c1a:	2101      	movs	r1, #1
 8000c1c:	486d      	ldr	r0, [pc, #436]	; (8000dd4 <display7SEG.6002+0x320>)
 8000c1e:	f000 fe43 	bl	80018a8 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2102      	movs	r1, #2
 8000c26:	486b      	ldr	r0, [pc, #428]	; (8000dd4 <display7SEG.6002+0x320>)
 8000c28:	f000 fe3e 	bl	80018a8 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2104      	movs	r1, #4
 8000c30:	4868      	ldr	r0, [pc, #416]	; (8000dd4 <display7SEG.6002+0x320>)
 8000c32:	f000 fe39 	bl	80018a8 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 8000c36:	2201      	movs	r2, #1
 8000c38:	2108      	movs	r1, #8
 8000c3a:	4866      	ldr	r0, [pc, #408]	; (8000dd4 <display7SEG.6002+0x320>)
 8000c3c:	f000 fe34 	bl	80018a8 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000c40:	2201      	movs	r2, #1
 8000c42:	2110      	movs	r1, #16
 8000c44:	4863      	ldr	r0, [pc, #396]	; (8000dd4 <display7SEG.6002+0x320>)
 8000c46:	f000 fe2f 	bl	80018a8 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2120      	movs	r1, #32
 8000c4e:	4861      	ldr	r0, [pc, #388]	; (8000dd4 <display7SEG.6002+0x320>)
 8000c50:	f000 fe2a 	bl	80018a8 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000c54:	2200      	movs	r2, #0
 8000c56:	2140      	movs	r1, #64	; 0x40
 8000c58:	485e      	ldr	r0, [pc, #376]	; (8000dd4 <display7SEG.6002+0x320>)
 8000c5a:	f000 fe25 	bl	80018a8 <HAL_GPIO_WritePin>
  			break;
 8000c5e:	e0b4      	b.n	8000dca <display7SEG.6002+0x316>
  			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000c60:	2200      	movs	r2, #0
 8000c62:	2101      	movs	r1, #1
 8000c64:	485b      	ldr	r0, [pc, #364]	; (8000dd4 <display7SEG.6002+0x320>)
 8000c66:	f000 fe1f 	bl	80018a8 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	2102      	movs	r1, #2
 8000c6e:	4859      	ldr	r0, [pc, #356]	; (8000dd4 <display7SEG.6002+0x320>)
 8000c70:	f000 fe1a 	bl	80018a8 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000c74:	2200      	movs	r2, #0
 8000c76:	2104      	movs	r1, #4
 8000c78:	4856      	ldr	r0, [pc, #344]	; (8000dd4 <display7SEG.6002+0x320>)
 8000c7a:	f000 fe15 	bl	80018a8 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2108      	movs	r1, #8
 8000c82:	4854      	ldr	r0, [pc, #336]	; (8000dd4 <display7SEG.6002+0x320>)
 8000c84:	f000 fe10 	bl	80018a8 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000c88:	2201      	movs	r2, #1
 8000c8a:	2110      	movs	r1, #16
 8000c8c:	4851      	ldr	r0, [pc, #324]	; (8000dd4 <display7SEG.6002+0x320>)
 8000c8e:	f000 fe0b 	bl	80018a8 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000c92:	2200      	movs	r2, #0
 8000c94:	2120      	movs	r1, #32
 8000c96:	484f      	ldr	r0, [pc, #316]	; (8000dd4 <display7SEG.6002+0x320>)
 8000c98:	f000 fe06 	bl	80018a8 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2140      	movs	r1, #64	; 0x40
 8000ca0:	484c      	ldr	r0, [pc, #304]	; (8000dd4 <display7SEG.6002+0x320>)
 8000ca2:	f000 fe01 	bl	80018a8 <HAL_GPIO_WritePin>
  			break;
 8000ca6:	e090      	b.n	8000dca <display7SEG.6002+0x316>
  			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2101      	movs	r1, #1
 8000cac:	4849      	ldr	r0, [pc, #292]	; (8000dd4 <display7SEG.6002+0x320>)
 8000cae:	f000 fdfb 	bl	80018a8 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	2102      	movs	r1, #2
 8000cb6:	4847      	ldr	r0, [pc, #284]	; (8000dd4 <display7SEG.6002+0x320>)
 8000cb8:	f000 fdf6 	bl	80018a8 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2104      	movs	r1, #4
 8000cc0:	4844      	ldr	r0, [pc, #272]	; (8000dd4 <display7SEG.6002+0x320>)
 8000cc2:	f000 fdf1 	bl	80018a8 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2108      	movs	r1, #8
 8000cca:	4842      	ldr	r0, [pc, #264]	; (8000dd4 <display7SEG.6002+0x320>)
 8000ccc:	f000 fdec 	bl	80018a8 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2110      	movs	r1, #16
 8000cd4:	483f      	ldr	r0, [pc, #252]	; (8000dd4 <display7SEG.6002+0x320>)
 8000cd6:	f000 fde7 	bl	80018a8 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2120      	movs	r1, #32
 8000cde:	483d      	ldr	r0, [pc, #244]	; (8000dd4 <display7SEG.6002+0x320>)
 8000ce0:	f000 fde2 	bl	80018a8 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2140      	movs	r1, #64	; 0x40
 8000ce8:	483a      	ldr	r0, [pc, #232]	; (8000dd4 <display7SEG.6002+0x320>)
 8000cea:	f000 fddd 	bl	80018a8 <HAL_GPIO_WritePin>
  			break;
 8000cee:	e06c      	b.n	8000dca <display7SEG.6002+0x316>
  			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	4837      	ldr	r0, [pc, #220]	; (8000dd4 <display7SEG.6002+0x320>)
 8000cf6:	f000 fdd7 	bl	80018a8 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2102      	movs	r1, #2
 8000cfe:	4835      	ldr	r0, [pc, #212]	; (8000dd4 <display7SEG.6002+0x320>)
 8000d00:	f000 fdd2 	bl	80018a8 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000d04:	2200      	movs	r2, #0
 8000d06:	2104      	movs	r1, #4
 8000d08:	4832      	ldr	r0, [pc, #200]	; (8000dd4 <display7SEG.6002+0x320>)
 8000d0a:	f000 fdcd 	bl	80018a8 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 8000d0e:	2201      	movs	r2, #1
 8000d10:	2108      	movs	r1, #8
 8000d12:	4830      	ldr	r0, [pc, #192]	; (8000dd4 <display7SEG.6002+0x320>)
 8000d14:	f000 fdc8 	bl	80018a8 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000d18:	2201      	movs	r2, #1
 8000d1a:	2110      	movs	r1, #16
 8000d1c:	482d      	ldr	r0, [pc, #180]	; (8000dd4 <display7SEG.6002+0x320>)
 8000d1e:	f000 fdc3 	bl	80018a8 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000d22:	2201      	movs	r2, #1
 8000d24:	2120      	movs	r1, #32
 8000d26:	482b      	ldr	r0, [pc, #172]	; (8000dd4 <display7SEG.6002+0x320>)
 8000d28:	f000 fdbe 	bl	80018a8 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	2140      	movs	r1, #64	; 0x40
 8000d30:	4828      	ldr	r0, [pc, #160]	; (8000dd4 <display7SEG.6002+0x320>)
 8000d32:	f000 fdb9 	bl	80018a8 <HAL_GPIO_WritePin>
  			break;
 8000d36:	e048      	b.n	8000dca <display7SEG.6002+0x316>
  			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	4825      	ldr	r0, [pc, #148]	; (8000dd4 <display7SEG.6002+0x320>)
 8000d3e:	f000 fdb3 	bl	80018a8 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000d42:	2200      	movs	r2, #0
 8000d44:	2102      	movs	r1, #2
 8000d46:	4823      	ldr	r0, [pc, #140]	; (8000dd4 <display7SEG.6002+0x320>)
 8000d48:	f000 fdae 	bl	80018a8 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2104      	movs	r1, #4
 8000d50:	4820      	ldr	r0, [pc, #128]	; (8000dd4 <display7SEG.6002+0x320>)
 8000d52:	f000 fda9 	bl	80018a8 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000d56:	2200      	movs	r2, #0
 8000d58:	2108      	movs	r1, #8
 8000d5a:	481e      	ldr	r0, [pc, #120]	; (8000dd4 <display7SEG.6002+0x320>)
 8000d5c:	f000 fda4 	bl	80018a8 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000d60:	2200      	movs	r2, #0
 8000d62:	2110      	movs	r1, #16
 8000d64:	481b      	ldr	r0, [pc, #108]	; (8000dd4 <display7SEG.6002+0x320>)
 8000d66:	f000 fd9f 	bl	80018a8 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2120      	movs	r1, #32
 8000d6e:	4819      	ldr	r0, [pc, #100]	; (8000dd4 <display7SEG.6002+0x320>)
 8000d70:	f000 fd9a 	bl	80018a8 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000d74:	2200      	movs	r2, #0
 8000d76:	2140      	movs	r1, #64	; 0x40
 8000d78:	4816      	ldr	r0, [pc, #88]	; (8000dd4 <display7SEG.6002+0x320>)
 8000d7a:	f000 fd95 	bl	80018a8 <HAL_GPIO_WritePin>
  			break;
 8000d7e:	e024      	b.n	8000dca <display7SEG.6002+0x316>
  			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000d80:	2200      	movs	r2, #0
 8000d82:	2101      	movs	r1, #1
 8000d84:	4813      	ldr	r0, [pc, #76]	; (8000dd4 <display7SEG.6002+0x320>)
 8000d86:	f000 fd8f 	bl	80018a8 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2102      	movs	r1, #2
 8000d8e:	4811      	ldr	r0, [pc, #68]	; (8000dd4 <display7SEG.6002+0x320>)
 8000d90:	f000 fd8a 	bl	80018a8 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000d94:	2200      	movs	r2, #0
 8000d96:	2104      	movs	r1, #4
 8000d98:	480e      	ldr	r0, [pc, #56]	; (8000dd4 <display7SEG.6002+0x320>)
 8000d9a:	f000 fd85 	bl	80018a8 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2108      	movs	r1, #8
 8000da2:	480c      	ldr	r0, [pc, #48]	; (8000dd4 <display7SEG.6002+0x320>)
 8000da4:	f000 fd80 	bl	80018a8 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000da8:	2201      	movs	r2, #1
 8000daa:	2110      	movs	r1, #16
 8000dac:	4809      	ldr	r0, [pc, #36]	; (8000dd4 <display7SEG.6002+0x320>)
 8000dae:	f000 fd7b 	bl	80018a8 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2120      	movs	r1, #32
 8000db6:	4807      	ldr	r0, [pc, #28]	; (8000dd4 <display7SEG.6002+0x320>)
 8000db8:	f000 fd76 	bl	80018a8 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2140      	movs	r1, #64	; 0x40
 8000dc0:	4804      	ldr	r0, [pc, #16]	; (8000dd4 <display7SEG.6002+0x320>)
 8000dc2:	f000 fd71 	bl	80018a8 <HAL_GPIO_WritePin>
  			break;
 8000dc6:	e000      	b.n	8000dca <display7SEG.6002+0x316>
  			break;
 8000dc8:	bf00      	nop
  }
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40010c00 	.word	0x40010c00

08000dd8 <update7SEG.6017>:
  void update7SEG ( int index ){
 8000dd8:	b590      	push	{r4, r7, lr}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	4664      	mov	r4, ip
 8000de2:	f8c7 c000 	str.w	ip, [r7]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2b03      	cmp	r3, #3
 8000dea:	d87b      	bhi.n	8000ee4 <update7SEG.6017+0x10c>
 8000dec:	a201      	add	r2, pc, #4	; (adr r2, 8000df4 <update7SEG.6017+0x1c>)
 8000dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000df2:	bf00      	nop
 8000df4:	08000e05 	.word	0x08000e05
 8000df8:	08000e3d 	.word	0x08000e3d
 8000dfc:	08000e75 	.word	0x08000e75
 8000e00:	08000ead 	.word	0x08000ead
				HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000e04:	2200      	movs	r2, #0
 8000e06:	2140      	movs	r1, #64	; 0x40
 8000e08:	4839      	ldr	r0, [pc, #228]	; (8000ef0 <update7SEG.6017+0x118>)
 8000e0a:	f000 fd4d 	bl	80018a8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000e0e:	2201      	movs	r2, #1
 8000e10:	2180      	movs	r1, #128	; 0x80
 8000e12:	4837      	ldr	r0, [pc, #220]	; (8000ef0 <update7SEG.6017+0x118>)
 8000e14:	f000 fd48 	bl	80018a8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000e18:	2201      	movs	r2, #1
 8000e1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e1e:	4834      	ldr	r0, [pc, #208]	; (8000ef0 <update7SEG.6017+0x118>)
 8000e20:	f000 fd42 	bl	80018a8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000e24:	2201      	movs	r2, #1
 8000e26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e2a:	4831      	ldr	r0, [pc, #196]	; (8000ef0 <update7SEG.6017+0x118>)
 8000e2c:	f000 fd3c 	bl	80018a8 <HAL_GPIO_WritePin>
				display7SEG(led_buffer[0]);
 8000e30:	68a3      	ldr	r3, [r4, #8]
 8000e32:	46a4      	mov	ip, r4
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff fe3d 	bl	8000ab4 <display7SEG.6002>
	  		  break ;
 8000e3a:	e054      	b.n	8000ee6 <update7SEG.6017+0x10e>
				HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	2140      	movs	r1, #64	; 0x40
 8000e40:	482b      	ldr	r0, [pc, #172]	; (8000ef0 <update7SEG.6017+0x118>)
 8000e42:	f000 fd31 	bl	80018a8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2180      	movs	r1, #128	; 0x80
 8000e4a:	4829      	ldr	r0, [pc, #164]	; (8000ef0 <update7SEG.6017+0x118>)
 8000e4c:	f000 fd2c 	bl	80018a8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000e50:	2201      	movs	r2, #1
 8000e52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e56:	4826      	ldr	r0, [pc, #152]	; (8000ef0 <update7SEG.6017+0x118>)
 8000e58:	f000 fd26 	bl	80018a8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e62:	4823      	ldr	r0, [pc, #140]	; (8000ef0 <update7SEG.6017+0x118>)
 8000e64:	f000 fd20 	bl	80018a8 <HAL_GPIO_WritePin>
				display7SEG(led_buffer[1]);
 8000e68:	68e3      	ldr	r3, [r4, #12]
 8000e6a:	46a4      	mov	ip, r4
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff fe21 	bl	8000ab4 <display7SEG.6002>
	  		  break ;
 8000e72:	e038      	b.n	8000ee6 <update7SEG.6017+0x10e>
				HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000e74:	2201      	movs	r2, #1
 8000e76:	2140      	movs	r1, #64	; 0x40
 8000e78:	481d      	ldr	r0, [pc, #116]	; (8000ef0 <update7SEG.6017+0x118>)
 8000e7a:	f000 fd15 	bl	80018a8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000e7e:	2201      	movs	r2, #1
 8000e80:	2180      	movs	r1, #128	; 0x80
 8000e82:	481b      	ldr	r0, [pc, #108]	; (8000ef0 <update7SEG.6017+0x118>)
 8000e84:	f000 fd10 	bl	80018a8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e8e:	4818      	ldr	r0, [pc, #96]	; (8000ef0 <update7SEG.6017+0x118>)
 8000e90:	f000 fd0a 	bl	80018a8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000e94:	2201      	movs	r2, #1
 8000e96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e9a:	4815      	ldr	r0, [pc, #84]	; (8000ef0 <update7SEG.6017+0x118>)
 8000e9c:	f000 fd04 	bl	80018a8 <HAL_GPIO_WritePin>
				display7SEG(led_buffer[2]);
 8000ea0:	6923      	ldr	r3, [r4, #16]
 8000ea2:	46a4      	mov	ip, r4
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff fe05 	bl	8000ab4 <display7SEG.6002>
	  		  break ;
 8000eaa:	e01c      	b.n	8000ee6 <update7SEG.6017+0x10e>
				HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000eac:	2201      	movs	r2, #1
 8000eae:	2140      	movs	r1, #64	; 0x40
 8000eb0:	480f      	ldr	r0, [pc, #60]	; (8000ef0 <update7SEG.6017+0x118>)
 8000eb2:	f000 fcf9 	bl	80018a8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	2180      	movs	r1, #128	; 0x80
 8000eba:	480d      	ldr	r0, [pc, #52]	; (8000ef0 <update7SEG.6017+0x118>)
 8000ebc:	f000 fcf4 	bl	80018a8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ec6:	480a      	ldr	r0, [pc, #40]	; (8000ef0 <update7SEG.6017+0x118>)
 8000ec8:	f000 fcee 	bl	80018a8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ed2:	4807      	ldr	r0, [pc, #28]	; (8000ef0 <update7SEG.6017+0x118>)
 8000ed4:	f000 fce8 	bl	80018a8 <HAL_GPIO_WritePin>
				display7SEG(led_buffer[3]);
 8000ed8:	6963      	ldr	r3, [r4, #20]
 8000eda:	46a4      	mov	ip, r4
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff fde9 	bl	8000ab4 <display7SEG.6002>
	  		  break ;
 8000ee2:	e000      	b.n	8000ee6 <update7SEG.6017+0x10e>
	  		  break ;
 8000ee4:	bf00      	nop
  }
 8000ee6:	bf00      	nop
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd90      	pop	{r4, r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40010800 	.word	0x40010800

08000ef4 <updateClockBuffer.6025>:
  void updateClockBuffer(){
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4663      	mov	r3, ip
 8000efc:	f8c7 c004 	str.w	ip, [r7, #4]
	  if(hour != led_buffer[0]*10 + led_buffer[1]){
 8000f00:	6899      	ldr	r1, [r3, #8]
 8000f02:	460a      	mov	r2, r1
 8000f04:	0092      	lsls	r2, r2, #2
 8000f06:	440a      	add	r2, r1
 8000f08:	0052      	lsls	r2, r2, #1
 8000f0a:	4611      	mov	r1, r2
 8000f0c:	68da      	ldr	r2, [r3, #12]
 8000f0e:	440a      	add	r2, r1
 8000f10:	6859      	ldr	r1, [r3, #4]
 8000f12:	4291      	cmp	r1, r2
 8000f14:	d014      	beq.n	8000f40 <updateClockBuffer.6025+0x4c>
		  led_buffer[0] = hour/10;
 8000f16:	685a      	ldr	r2, [r3, #4]
 8000f18:	491c      	ldr	r1, [pc, #112]	; (8000f8c <updateClockBuffer.6025+0x98>)
 8000f1a:	fb81 0102 	smull	r0, r1, r1, r2
 8000f1e:	1089      	asrs	r1, r1, #2
 8000f20:	17d2      	asrs	r2, r2, #31
 8000f22:	1a8a      	subs	r2, r1, r2
 8000f24:	609a      	str	r2, [r3, #8]
		  led_buffer[1] = hour%10;
 8000f26:	6858      	ldr	r0, [r3, #4]
 8000f28:	4a18      	ldr	r2, [pc, #96]	; (8000f8c <updateClockBuffer.6025+0x98>)
 8000f2a:	fb82 1200 	smull	r1, r2, r2, r0
 8000f2e:	1091      	asrs	r1, r2, #2
 8000f30:	17c2      	asrs	r2, r0, #31
 8000f32:	1a89      	subs	r1, r1, r2
 8000f34:	460a      	mov	r2, r1
 8000f36:	0092      	lsls	r2, r2, #2
 8000f38:	440a      	add	r2, r1
 8000f3a:	0052      	lsls	r2, r2, #1
 8000f3c:	1a81      	subs	r1, r0, r2
 8000f3e:	60d9      	str	r1, [r3, #12]
	  if(minute != led_buffer[2]*10 + led_buffer[3]){
 8000f40:	6919      	ldr	r1, [r3, #16]
 8000f42:	460a      	mov	r2, r1
 8000f44:	0092      	lsls	r2, r2, #2
 8000f46:	440a      	add	r2, r1
 8000f48:	0052      	lsls	r2, r2, #1
 8000f4a:	4611      	mov	r1, r2
 8000f4c:	695a      	ldr	r2, [r3, #20]
 8000f4e:	440a      	add	r2, r1
 8000f50:	6819      	ldr	r1, [r3, #0]
 8000f52:	4291      	cmp	r1, r2
 8000f54:	d014      	beq.n	8000f80 <updateClockBuffer.6025+0x8c>
		  led_buffer[2] = minute/10;
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	490c      	ldr	r1, [pc, #48]	; (8000f8c <updateClockBuffer.6025+0x98>)
 8000f5a:	fb81 0102 	smull	r0, r1, r1, r2
 8000f5e:	1089      	asrs	r1, r1, #2
 8000f60:	17d2      	asrs	r2, r2, #31
 8000f62:	1a8a      	subs	r2, r1, r2
 8000f64:	611a      	str	r2, [r3, #16]
		  led_buffer[3] = minute%10;
 8000f66:	6818      	ldr	r0, [r3, #0]
 8000f68:	4a08      	ldr	r2, [pc, #32]	; (8000f8c <updateClockBuffer.6025+0x98>)
 8000f6a:	fb82 1200 	smull	r1, r2, r2, r0
 8000f6e:	1091      	asrs	r1, r2, #2
 8000f70:	17c2      	asrs	r2, r0, #31
 8000f72:	1a89      	subs	r1, r1, r2
 8000f74:	460a      	mov	r2, r1
 8000f76:	0092      	lsls	r2, r2, #2
 8000f78:	440a      	add	r2, r1
 8000f7a:	0052      	lsls	r2, r2, #1
 8000f7c:	1a81      	subs	r1, r0, r2
 8000f7e:	6159      	str	r1, [r3, #20]
  }
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bc80      	pop	{r7}
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	66666667 	.word	0x66666667

08000f90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b090      	sub	sp, #64	; 0x40
 8000f94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f96:	f107 0318 	add.w	r3, r7, #24
 8000f9a:	2228      	movs	r2, #40	; 0x28
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f001 fc9c 	bl	80028dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]
 8000fae:	60da      	str	r2, [r3, #12]
 8000fb0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fba:	2310      	movs	r3, #16
 8000fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc2:	f107 0318 	add.w	r3, r7, #24
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f000 fca0 	bl	800190c <HAL_RCC_OscConfig>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000fd2:	f000 f8c5 	bl	8001160 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd6:	230f      	movs	r3, #15
 8000fd8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fea:	1d3b      	adds	r3, r7, #4
 8000fec:	2100      	movs	r1, #0
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 ff0c 	bl	8001e0c <HAL_RCC_ClockConfig>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000ffa:	f000 f8b1 	bl	8001160 <Error_Handler>
  }
}
 8000ffe:	bf00      	nop
 8001000:	3740      	adds	r7, #64	; 0x40
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800100e:	f107 0308 	add.w	r3, r7, #8
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	605a      	str	r2, [r3, #4]
 8001018:	609a      	str	r2, [r3, #8]
 800101a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800101c:	463b      	mov	r3, r7
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001024:	4b1d      	ldr	r3, [pc, #116]	; (800109c <MX_TIM2_Init+0x94>)
 8001026:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800102a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800102c:	4b1b      	ldr	r3, [pc, #108]	; (800109c <MX_TIM2_Init+0x94>)
 800102e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001032:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001034:	4b19      	ldr	r3, [pc, #100]	; (800109c <MX_TIM2_Init+0x94>)
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800103a:	4b18      	ldr	r3, [pc, #96]	; (800109c <MX_TIM2_Init+0x94>)
 800103c:	2209      	movs	r2, #9
 800103e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001040:	4b16      	ldr	r3, [pc, #88]	; (800109c <MX_TIM2_Init+0x94>)
 8001042:	2200      	movs	r2, #0
 8001044:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001046:	4b15      	ldr	r3, [pc, #84]	; (800109c <MX_TIM2_Init+0x94>)
 8001048:	2200      	movs	r2, #0
 800104a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800104c:	4813      	ldr	r0, [pc, #76]	; (800109c <MX_TIM2_Init+0x94>)
 800104e:	f001 f839 	bl	80020c4 <HAL_TIM_Base_Init>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001058:	f000 f882 	bl	8001160 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800105c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001060:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001062:	f107 0308 	add.w	r3, r7, #8
 8001066:	4619      	mov	r1, r3
 8001068:	480c      	ldr	r0, [pc, #48]	; (800109c <MX_TIM2_Init+0x94>)
 800106a:	f001 f9cf 	bl	800240c <HAL_TIM_ConfigClockSource>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001074:	f000 f874 	bl	8001160 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001078:	2300      	movs	r3, #0
 800107a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800107c:	2300      	movs	r3, #0
 800107e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001080:	463b      	mov	r3, r7
 8001082:	4619      	mov	r1, r3
 8001084:	4805      	ldr	r0, [pc, #20]	; (800109c <MX_TIM2_Init+0x94>)
 8001086:	f001 fb9b 	bl	80027c0 <HAL_TIMEx_MasterConfigSynchronization>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001090:	f000 f866 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001094:	bf00      	nop
 8001096:	3718      	adds	r7, #24
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20000040 	.word	0x20000040

080010a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a6:	f107 0308 	add.w	r3, r7, #8
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	605a      	str	r2, [r3, #4]
 80010b0:	609a      	str	r2, [r3, #8]
 80010b2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b4:	4b22      	ldr	r3, [pc, #136]	; (8001140 <MX_GPIO_Init+0xa0>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	4a21      	ldr	r2, [pc, #132]	; (8001140 <MX_GPIO_Init+0xa0>)
 80010ba:	f043 0304 	orr.w	r3, r3, #4
 80010be:	6193      	str	r3, [r2, #24]
 80010c0:	4b1f      	ldr	r3, [pc, #124]	; (8001140 <MX_GPIO_Init+0xa0>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	f003 0304 	and.w	r3, r3, #4
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010cc:	4b1c      	ldr	r3, [pc, #112]	; (8001140 <MX_GPIO_Init+0xa0>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	4a1b      	ldr	r2, [pc, #108]	; (8001140 <MX_GPIO_Init+0xa0>)
 80010d2:	f043 0308 	orr.w	r3, r3, #8
 80010d6:	6193      	str	r3, [r2, #24]
 80010d8:	4b19      	ldr	r3, [pc, #100]	; (8001140 <MX_GPIO_Init+0xa0>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	f003 0308 	and.w	r3, r3, #8
 80010e0:	603b      	str	r3, [r7, #0]
 80010e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENM0_Pin|ENM1_Pin|DOT_Pin|LED_RED_Pin
 80010e4:	2200      	movs	r2, #0
 80010e6:	f64f 71fc 	movw	r1, #65532	; 0xfffc
 80010ea:	4816      	ldr	r0, [pc, #88]	; (8001144 <MX_GPIO_Init+0xa4>)
 80010ec:	f000 fbdc 	bl	80018a8 <HAL_GPIO_WritePin>
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |ENM2_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin
                          |ENM6_Pin|ENM7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|ROW2_Pin
 80010f0:	2200      	movs	r2, #0
 80010f2:	f64f 717f 	movw	r1, #65407	; 0xff7f
 80010f6:	4814      	ldr	r0, [pc, #80]	; (8001148 <MX_GPIO_Init+0xa8>)
 80010f8:	f000 fbd6 	bl	80018a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ENM0_Pin ENM1_Pin DOT_Pin LED_RED_Pin
                           EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           ENM2_Pin ENM3_Pin ENM4_Pin ENM5_Pin
                           ENM6_Pin ENM7_Pin */
  GPIO_InitStruct.Pin = ENM0_Pin|ENM1_Pin|DOT_Pin|LED_RED_Pin
 80010fc:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8001100:	60bb      	str	r3, [r7, #8]
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |ENM2_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin
                          |ENM6_Pin|ENM7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001102:	2301      	movs	r3, #1
 8001104:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110a:	2302      	movs	r3, #2
 800110c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110e:	f107 0308 	add.w	r3, r7, #8
 8001112:	4619      	mov	r1, r3
 8001114:	480b      	ldr	r0, [pc, #44]	; (8001144 <MX_GPIO_Init+0xa4>)
 8001116:	f000 fa4d 	bl	80015b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin ROW2_Pin
                           ROW3_Pin ROW4_Pin ROW5_Pin ROW6_Pin
                           ROW7_Pin SEG3_Pin SEG4_Pin SEG5_Pin
                           SEG6_Pin ROW0_Pin ROW1_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|ROW2_Pin
 800111a:	f64f 737f 	movw	r3, #65407	; 0xff7f
 800111e:	60bb      	str	r3, [r7, #8]
                          |ROW3_Pin|ROW4_Pin|ROW5_Pin|ROW6_Pin
                          |ROW7_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
                          |SEG6_Pin|ROW0_Pin|ROW1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001120:	2301      	movs	r3, #1
 8001122:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001128:	2302      	movs	r3, #2
 800112a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800112c:	f107 0308 	add.w	r3, r7, #8
 8001130:	4619      	mov	r1, r3
 8001132:	4805      	ldr	r0, [pc, #20]	; (8001148 <MX_GPIO_Init+0xa8>)
 8001134:	f000 fa3e 	bl	80015b4 <HAL_GPIO_Init>

}
 8001138:	bf00      	nop
 800113a:	3718      	adds	r7, #24
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40021000 	.word	0x40021000
 8001144:	40010800 	.word	0x40010800
 8001148:	40010c00 	.word	0x40010c00

0800114c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
  void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
  {
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
	  timerRun();
 8001154:	f7ff f836 	bl	80001c4 <timerRun>
  }
 8001158:	bf00      	nop
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001164:	b672      	cpsid	i
}
 8001166:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001168:	e7fe      	b.n	8001168 <Error_Handler+0x8>
	...

0800116c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001172:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <HAL_MspInit+0x5c>)
 8001174:	699b      	ldr	r3, [r3, #24]
 8001176:	4a14      	ldr	r2, [pc, #80]	; (80011c8 <HAL_MspInit+0x5c>)
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	6193      	str	r3, [r2, #24]
 800117e:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <HAL_MspInit+0x5c>)
 8001180:	699b      	ldr	r3, [r3, #24]
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	60bb      	str	r3, [r7, #8]
 8001188:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800118a:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <HAL_MspInit+0x5c>)
 800118c:	69db      	ldr	r3, [r3, #28]
 800118e:	4a0e      	ldr	r2, [pc, #56]	; (80011c8 <HAL_MspInit+0x5c>)
 8001190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001194:	61d3      	str	r3, [r2, #28]
 8001196:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <HAL_MspInit+0x5c>)
 8001198:	69db      	ldr	r3, [r3, #28]
 800119a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119e:	607b      	str	r3, [r7, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80011a2:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <HAL_MspInit+0x60>)
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	4a04      	ldr	r2, [pc, #16]	; (80011cc <HAL_MspInit+0x60>)
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011be:	bf00      	nop
 80011c0:	3714      	adds	r7, #20
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bc80      	pop	{r7}
 80011c6:	4770      	bx	lr
 80011c8:	40021000 	.word	0x40021000
 80011cc:	40010000 	.word	0x40010000

080011d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011e0:	d113      	bne.n	800120a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011e2:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <HAL_TIM_Base_MspInit+0x44>)
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	4a0b      	ldr	r2, [pc, #44]	; (8001214 <HAL_TIM_Base_MspInit+0x44>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	61d3      	str	r3, [r2, #28]
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <HAL_TIM_Base_MspInit+0x44>)
 80011f0:	69db      	ldr	r3, [r3, #28]
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011fa:	2200      	movs	r2, #0
 80011fc:	2100      	movs	r1, #0
 80011fe:	201c      	movs	r0, #28
 8001200:	f000 f9a1 	bl	8001546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001204:	201c      	movs	r0, #28
 8001206:	f000 f9ba 	bl	800157e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800120a:	bf00      	nop
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40021000 	.word	0x40021000

08001218 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800121c:	e7fe      	b.n	800121c <NMI_Handler+0x4>

0800121e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001222:	e7fe      	b.n	8001222 <HardFault_Handler+0x4>

08001224 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001228:	e7fe      	b.n	8001228 <MemManage_Handler+0x4>

0800122a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800122e:	e7fe      	b.n	800122e <BusFault_Handler+0x4>

08001230 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001234:	e7fe      	b.n	8001234 <UsageFault_Handler+0x4>

08001236 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	46bd      	mov	sp, r7
 800123e:	bc80      	pop	{r7}
 8001240:	4770      	bx	lr

08001242 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	46bd      	mov	sp, r7
 800124a:	bc80      	pop	{r7}
 800124c:	4770      	bx	lr

0800124e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	46bd      	mov	sp, r7
 8001256:	bc80      	pop	{r7}
 8001258:	4770      	bx	lr

0800125a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800125e:	f000 f87f 	bl	8001360 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
	...

08001268 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800126c:	4802      	ldr	r0, [pc, #8]	; (8001278 <TIM2_IRQHandler+0x10>)
 800126e:	f000 ffc5 	bl	80021fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000040 	.word	0x20000040

0800127c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	bc80      	pop	{r7}
 8001286:	4770      	bx	lr

08001288 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001288:	f7ff fff8 	bl	800127c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800128c:	480b      	ldr	r0, [pc, #44]	; (80012bc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800128e:	490c      	ldr	r1, [pc, #48]	; (80012c0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001290:	4a0c      	ldr	r2, [pc, #48]	; (80012c4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001292:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001294:	e002      	b.n	800129c <LoopCopyDataInit>

08001296 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001296:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001298:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800129a:	3304      	adds	r3, #4

0800129c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800129c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800129e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a0:	d3f9      	bcc.n	8001296 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012a2:	4a09      	ldr	r2, [pc, #36]	; (80012c8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80012a4:	4c09      	ldr	r4, [pc, #36]	; (80012cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012a8:	e001      	b.n	80012ae <LoopFillZerobss>

080012aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012ac:	3204      	adds	r2, #4

080012ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b0:	d3fb      	bcc.n	80012aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012b2:	f001 faef 	bl	8002894 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012b6:	f7ff faeb 	bl	8000890 <main>
  bx lr
 80012ba:	4770      	bx	lr
  ldr r0, =_sdata
 80012bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012c0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80012c4:	08002948 	.word	0x08002948
  ldr r2, =_sbss
 80012c8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80012cc:	2000008c 	.word	0x2000008c

080012d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012d0:	e7fe      	b.n	80012d0 <ADC1_2_IRQHandler>
	...

080012d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012d8:	4b08      	ldr	r3, [pc, #32]	; (80012fc <HAL_Init+0x28>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a07      	ldr	r2, [pc, #28]	; (80012fc <HAL_Init+0x28>)
 80012de:	f043 0310 	orr.w	r3, r3, #16
 80012e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012e4:	2003      	movs	r0, #3
 80012e6:	f000 f923 	bl	8001530 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ea:	200f      	movs	r0, #15
 80012ec:	f000 f808 	bl	8001300 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012f0:	f7ff ff3c 	bl	800116c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40022000 	.word	0x40022000

08001300 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001308:	4b12      	ldr	r3, [pc, #72]	; (8001354 <HAL_InitTick+0x54>)
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	4b12      	ldr	r3, [pc, #72]	; (8001358 <HAL_InitTick+0x58>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	4619      	mov	r1, r3
 8001312:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001316:	fbb3 f3f1 	udiv	r3, r3, r1
 800131a:	fbb2 f3f3 	udiv	r3, r2, r3
 800131e:	4618      	mov	r0, r3
 8001320:	f000 f93b 	bl	800159a <HAL_SYSTICK_Config>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e00e      	b.n	800134c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2b0f      	cmp	r3, #15
 8001332:	d80a      	bhi.n	800134a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001334:	2200      	movs	r2, #0
 8001336:	6879      	ldr	r1, [r7, #4]
 8001338:	f04f 30ff 	mov.w	r0, #4294967295
 800133c:	f000 f903 	bl	8001546 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001340:	4a06      	ldr	r2, [pc, #24]	; (800135c <HAL_InitTick+0x5c>)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001346:	2300      	movs	r3, #0
 8001348:	e000      	b.n	800134c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
}
 800134c:	4618      	mov	r0, r3
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20000000 	.word	0x20000000
 8001358:	20000008 	.word	0x20000008
 800135c:	20000004 	.word	0x20000004

08001360 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001364:	4b05      	ldr	r3, [pc, #20]	; (800137c <HAL_IncTick+0x1c>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	461a      	mov	r2, r3
 800136a:	4b05      	ldr	r3, [pc, #20]	; (8001380 <HAL_IncTick+0x20>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4413      	add	r3, r2
 8001370:	4a03      	ldr	r2, [pc, #12]	; (8001380 <HAL_IncTick+0x20>)
 8001372:	6013      	str	r3, [r2, #0]
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr
 800137c:	20000008 	.word	0x20000008
 8001380:	20000088 	.word	0x20000088

08001384 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  return uwTick;
 8001388:	4b02      	ldr	r3, [pc, #8]	; (8001394 <HAL_GetTick+0x10>)
 800138a:	681b      	ldr	r3, [r3, #0]
}
 800138c:	4618      	mov	r0, r3
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr
 8001394:	20000088 	.word	0x20000088

08001398 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013a8:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <__NVIC_SetPriorityGrouping+0x44>)
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ae:	68ba      	ldr	r2, [r7, #8]
 80013b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013b4:	4013      	ands	r3, r2
 80013b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ca:	4a04      	ldr	r2, [pc, #16]	; (80013dc <__NVIC_SetPriorityGrouping+0x44>)
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	60d3      	str	r3, [r2, #12]
}
 80013d0:	bf00      	nop
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc80      	pop	{r7}
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013e4:	4b04      	ldr	r3, [pc, #16]	; (80013f8 <__NVIC_GetPriorityGrouping+0x18>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	0a1b      	lsrs	r3, r3, #8
 80013ea:	f003 0307 	and.w	r3, r3, #7
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bc80      	pop	{r7}
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140a:	2b00      	cmp	r3, #0
 800140c:	db0b      	blt.n	8001426 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	f003 021f 	and.w	r2, r3, #31
 8001414:	4906      	ldr	r1, [pc, #24]	; (8001430 <__NVIC_EnableIRQ+0x34>)
 8001416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141a:	095b      	lsrs	r3, r3, #5
 800141c:	2001      	movs	r0, #1
 800141e:	fa00 f202 	lsl.w	r2, r0, r2
 8001422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr
 8001430:	e000e100 	.word	0xe000e100

08001434 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	6039      	str	r1, [r7, #0]
 800143e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001444:	2b00      	cmp	r3, #0
 8001446:	db0a      	blt.n	800145e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	b2da      	uxtb	r2, r3
 800144c:	490c      	ldr	r1, [pc, #48]	; (8001480 <__NVIC_SetPriority+0x4c>)
 800144e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001452:	0112      	lsls	r2, r2, #4
 8001454:	b2d2      	uxtb	r2, r2
 8001456:	440b      	add	r3, r1
 8001458:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800145c:	e00a      	b.n	8001474 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	b2da      	uxtb	r2, r3
 8001462:	4908      	ldr	r1, [pc, #32]	; (8001484 <__NVIC_SetPriority+0x50>)
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	f003 030f 	and.w	r3, r3, #15
 800146a:	3b04      	subs	r3, #4
 800146c:	0112      	lsls	r2, r2, #4
 800146e:	b2d2      	uxtb	r2, r2
 8001470:	440b      	add	r3, r1
 8001472:	761a      	strb	r2, [r3, #24]
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	bc80      	pop	{r7}
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	e000e100 	.word	0xe000e100
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001488:	b480      	push	{r7}
 800148a:	b089      	sub	sp, #36	; 0x24
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	f1c3 0307 	rsb	r3, r3, #7
 80014a2:	2b04      	cmp	r3, #4
 80014a4:	bf28      	it	cs
 80014a6:	2304      	movcs	r3, #4
 80014a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	3304      	adds	r3, #4
 80014ae:	2b06      	cmp	r3, #6
 80014b0:	d902      	bls.n	80014b8 <NVIC_EncodePriority+0x30>
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	3b03      	subs	r3, #3
 80014b6:	e000      	b.n	80014ba <NVIC_EncodePriority+0x32>
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014bc:	f04f 32ff 	mov.w	r2, #4294967295
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	43da      	mvns	r2, r3
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	401a      	ands	r2, r3
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014d0:	f04f 31ff 	mov.w	r1, #4294967295
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	fa01 f303 	lsl.w	r3, r1, r3
 80014da:	43d9      	mvns	r1, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e0:	4313      	orrs	r3, r2
         );
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3724      	adds	r7, #36	; 0x24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr

080014ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014fc:	d301      	bcc.n	8001502 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014fe:	2301      	movs	r3, #1
 8001500:	e00f      	b.n	8001522 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001502:	4a0a      	ldr	r2, [pc, #40]	; (800152c <SysTick_Config+0x40>)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3b01      	subs	r3, #1
 8001508:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800150a:	210f      	movs	r1, #15
 800150c:	f04f 30ff 	mov.w	r0, #4294967295
 8001510:	f7ff ff90 	bl	8001434 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001514:	4b05      	ldr	r3, [pc, #20]	; (800152c <SysTick_Config+0x40>)
 8001516:	2200      	movs	r2, #0
 8001518:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800151a:	4b04      	ldr	r3, [pc, #16]	; (800152c <SysTick_Config+0x40>)
 800151c:	2207      	movs	r2, #7
 800151e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	e000e010 	.word	0xe000e010

08001530 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f7ff ff2d 	bl	8001398 <__NVIC_SetPriorityGrouping>
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001546:	b580      	push	{r7, lr}
 8001548:	b086      	sub	sp, #24
 800154a:	af00      	add	r7, sp, #0
 800154c:	4603      	mov	r3, r0
 800154e:	60b9      	str	r1, [r7, #8]
 8001550:	607a      	str	r2, [r7, #4]
 8001552:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001558:	f7ff ff42 	bl	80013e0 <__NVIC_GetPriorityGrouping>
 800155c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	68b9      	ldr	r1, [r7, #8]
 8001562:	6978      	ldr	r0, [r7, #20]
 8001564:	f7ff ff90 	bl	8001488 <NVIC_EncodePriority>
 8001568:	4602      	mov	r2, r0
 800156a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800156e:	4611      	mov	r1, r2
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff ff5f 	bl	8001434 <__NVIC_SetPriority>
}
 8001576:	bf00      	nop
 8001578:	3718      	adds	r7, #24
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
 8001584:	4603      	mov	r3, r0
 8001586:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff ff35 	bl	80013fc <__NVIC_EnableIRQ>
}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b082      	sub	sp, #8
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7ff ffa2 	bl	80014ec <SysTick_Config>
 80015a8:	4603      	mov	r3, r0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
	...

080015b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b08b      	sub	sp, #44	; 0x2c
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015be:	2300      	movs	r3, #0
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015c2:	2300      	movs	r3, #0
 80015c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015c6:	e148      	b.n	800185a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015c8:	2201      	movs	r2, #1
 80015ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	69fa      	ldr	r2, [r7, #28]
 80015d8:	4013      	ands	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	f040 8137 	bne.w	8001854 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	4aa3      	ldr	r2, [pc, #652]	; (8001878 <HAL_GPIO_Init+0x2c4>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d05e      	beq.n	80016ae <HAL_GPIO_Init+0xfa>
 80015f0:	4aa1      	ldr	r2, [pc, #644]	; (8001878 <HAL_GPIO_Init+0x2c4>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d875      	bhi.n	80016e2 <HAL_GPIO_Init+0x12e>
 80015f6:	4aa1      	ldr	r2, [pc, #644]	; (800187c <HAL_GPIO_Init+0x2c8>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d058      	beq.n	80016ae <HAL_GPIO_Init+0xfa>
 80015fc:	4a9f      	ldr	r2, [pc, #636]	; (800187c <HAL_GPIO_Init+0x2c8>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d86f      	bhi.n	80016e2 <HAL_GPIO_Init+0x12e>
 8001602:	4a9f      	ldr	r2, [pc, #636]	; (8001880 <HAL_GPIO_Init+0x2cc>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d052      	beq.n	80016ae <HAL_GPIO_Init+0xfa>
 8001608:	4a9d      	ldr	r2, [pc, #628]	; (8001880 <HAL_GPIO_Init+0x2cc>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d869      	bhi.n	80016e2 <HAL_GPIO_Init+0x12e>
 800160e:	4a9d      	ldr	r2, [pc, #628]	; (8001884 <HAL_GPIO_Init+0x2d0>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d04c      	beq.n	80016ae <HAL_GPIO_Init+0xfa>
 8001614:	4a9b      	ldr	r2, [pc, #620]	; (8001884 <HAL_GPIO_Init+0x2d0>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d863      	bhi.n	80016e2 <HAL_GPIO_Init+0x12e>
 800161a:	4a9b      	ldr	r2, [pc, #620]	; (8001888 <HAL_GPIO_Init+0x2d4>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d046      	beq.n	80016ae <HAL_GPIO_Init+0xfa>
 8001620:	4a99      	ldr	r2, [pc, #612]	; (8001888 <HAL_GPIO_Init+0x2d4>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d85d      	bhi.n	80016e2 <HAL_GPIO_Init+0x12e>
 8001626:	2b12      	cmp	r3, #18
 8001628:	d82a      	bhi.n	8001680 <HAL_GPIO_Init+0xcc>
 800162a:	2b12      	cmp	r3, #18
 800162c:	d859      	bhi.n	80016e2 <HAL_GPIO_Init+0x12e>
 800162e:	a201      	add	r2, pc, #4	; (adr r2, 8001634 <HAL_GPIO_Init+0x80>)
 8001630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001634:	080016af 	.word	0x080016af
 8001638:	08001689 	.word	0x08001689
 800163c:	0800169b 	.word	0x0800169b
 8001640:	080016dd 	.word	0x080016dd
 8001644:	080016e3 	.word	0x080016e3
 8001648:	080016e3 	.word	0x080016e3
 800164c:	080016e3 	.word	0x080016e3
 8001650:	080016e3 	.word	0x080016e3
 8001654:	080016e3 	.word	0x080016e3
 8001658:	080016e3 	.word	0x080016e3
 800165c:	080016e3 	.word	0x080016e3
 8001660:	080016e3 	.word	0x080016e3
 8001664:	080016e3 	.word	0x080016e3
 8001668:	080016e3 	.word	0x080016e3
 800166c:	080016e3 	.word	0x080016e3
 8001670:	080016e3 	.word	0x080016e3
 8001674:	080016e3 	.word	0x080016e3
 8001678:	08001691 	.word	0x08001691
 800167c:	080016a5 	.word	0x080016a5
 8001680:	4a82      	ldr	r2, [pc, #520]	; (800188c <HAL_GPIO_Init+0x2d8>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d013      	beq.n	80016ae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001686:	e02c      	b.n	80016e2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	623b      	str	r3, [r7, #32]
          break;
 800168e:	e029      	b.n	80016e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	3304      	adds	r3, #4
 8001696:	623b      	str	r3, [r7, #32]
          break;
 8001698:	e024      	b.n	80016e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	3308      	adds	r3, #8
 80016a0:	623b      	str	r3, [r7, #32]
          break;
 80016a2:	e01f      	b.n	80016e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	330c      	adds	r3, #12
 80016aa:	623b      	str	r3, [r7, #32]
          break;
 80016ac:	e01a      	b.n	80016e4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d102      	bne.n	80016bc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016b6:	2304      	movs	r3, #4
 80016b8:	623b      	str	r3, [r7, #32]
          break;
 80016ba:	e013      	b.n	80016e4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d105      	bne.n	80016d0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016c4:	2308      	movs	r3, #8
 80016c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	69fa      	ldr	r2, [r7, #28]
 80016cc:	611a      	str	r2, [r3, #16]
          break;
 80016ce:	e009      	b.n	80016e4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016d0:	2308      	movs	r3, #8
 80016d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	69fa      	ldr	r2, [r7, #28]
 80016d8:	615a      	str	r2, [r3, #20]
          break;
 80016da:	e003      	b.n	80016e4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016dc:	2300      	movs	r3, #0
 80016de:	623b      	str	r3, [r7, #32]
          break;
 80016e0:	e000      	b.n	80016e4 <HAL_GPIO_Init+0x130>
          break;
 80016e2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	2bff      	cmp	r3, #255	; 0xff
 80016e8:	d801      	bhi.n	80016ee <HAL_GPIO_Init+0x13a>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	e001      	b.n	80016f2 <HAL_GPIO_Init+0x13e>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	3304      	adds	r3, #4
 80016f2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	2bff      	cmp	r3, #255	; 0xff
 80016f8:	d802      	bhi.n	8001700 <HAL_GPIO_Init+0x14c>
 80016fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	e002      	b.n	8001706 <HAL_GPIO_Init+0x152>
 8001700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001702:	3b08      	subs	r3, #8
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	210f      	movs	r1, #15
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	fa01 f303 	lsl.w	r3, r1, r3
 8001714:	43db      	mvns	r3, r3
 8001716:	401a      	ands	r2, r3
 8001718:	6a39      	ldr	r1, [r7, #32]
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	fa01 f303 	lsl.w	r3, r1, r3
 8001720:	431a      	orrs	r2, r3
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172e:	2b00      	cmp	r3, #0
 8001730:	f000 8090 	beq.w	8001854 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001734:	4b56      	ldr	r3, [pc, #344]	; (8001890 <HAL_GPIO_Init+0x2dc>)
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	4a55      	ldr	r2, [pc, #340]	; (8001890 <HAL_GPIO_Init+0x2dc>)
 800173a:	f043 0301 	orr.w	r3, r3, #1
 800173e:	6193      	str	r3, [r2, #24]
 8001740:	4b53      	ldr	r3, [pc, #332]	; (8001890 <HAL_GPIO_Init+0x2dc>)
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	f003 0301 	and.w	r3, r3, #1
 8001748:	60bb      	str	r3, [r7, #8]
 800174a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800174c:	4a51      	ldr	r2, [pc, #324]	; (8001894 <HAL_GPIO_Init+0x2e0>)
 800174e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001750:	089b      	lsrs	r3, r3, #2
 8001752:	3302      	adds	r3, #2
 8001754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001758:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800175a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175c:	f003 0303 	and.w	r3, r3, #3
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	220f      	movs	r2, #15
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	43db      	mvns	r3, r3
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	4013      	ands	r3, r2
 800176e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4a49      	ldr	r2, [pc, #292]	; (8001898 <HAL_GPIO_Init+0x2e4>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d00d      	beq.n	8001794 <HAL_GPIO_Init+0x1e0>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4a48      	ldr	r2, [pc, #288]	; (800189c <HAL_GPIO_Init+0x2e8>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d007      	beq.n	8001790 <HAL_GPIO_Init+0x1dc>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4a47      	ldr	r2, [pc, #284]	; (80018a0 <HAL_GPIO_Init+0x2ec>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d101      	bne.n	800178c <HAL_GPIO_Init+0x1d8>
 8001788:	2302      	movs	r3, #2
 800178a:	e004      	b.n	8001796 <HAL_GPIO_Init+0x1e2>
 800178c:	2303      	movs	r3, #3
 800178e:	e002      	b.n	8001796 <HAL_GPIO_Init+0x1e2>
 8001790:	2301      	movs	r3, #1
 8001792:	e000      	b.n	8001796 <HAL_GPIO_Init+0x1e2>
 8001794:	2300      	movs	r3, #0
 8001796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001798:	f002 0203 	and.w	r2, r2, #3
 800179c:	0092      	lsls	r2, r2, #2
 800179e:	4093      	lsls	r3, r2
 80017a0:	68fa      	ldr	r2, [r7, #12]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017a6:	493b      	ldr	r1, [pc, #236]	; (8001894 <HAL_GPIO_Init+0x2e0>)
 80017a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017aa:	089b      	lsrs	r3, r3, #2
 80017ac:	3302      	adds	r3, #2
 80017ae:	68fa      	ldr	r2, [r7, #12]
 80017b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d006      	beq.n	80017ce <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017c0:	4b38      	ldr	r3, [pc, #224]	; (80018a4 <HAL_GPIO_Init+0x2f0>)
 80017c2:	689a      	ldr	r2, [r3, #8]
 80017c4:	4937      	ldr	r1, [pc, #220]	; (80018a4 <HAL_GPIO_Init+0x2f0>)
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	608b      	str	r3, [r1, #8]
 80017cc:	e006      	b.n	80017dc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017ce:	4b35      	ldr	r3, [pc, #212]	; (80018a4 <HAL_GPIO_Init+0x2f0>)
 80017d0:	689a      	ldr	r2, [r3, #8]
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	43db      	mvns	r3, r3
 80017d6:	4933      	ldr	r1, [pc, #204]	; (80018a4 <HAL_GPIO_Init+0x2f0>)
 80017d8:	4013      	ands	r3, r2
 80017da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d006      	beq.n	80017f6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017e8:	4b2e      	ldr	r3, [pc, #184]	; (80018a4 <HAL_GPIO_Init+0x2f0>)
 80017ea:	68da      	ldr	r2, [r3, #12]
 80017ec:	492d      	ldr	r1, [pc, #180]	; (80018a4 <HAL_GPIO_Init+0x2f0>)
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	60cb      	str	r3, [r1, #12]
 80017f4:	e006      	b.n	8001804 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017f6:	4b2b      	ldr	r3, [pc, #172]	; (80018a4 <HAL_GPIO_Init+0x2f0>)
 80017f8:	68da      	ldr	r2, [r3, #12]
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	43db      	mvns	r3, r3
 80017fe:	4929      	ldr	r1, [pc, #164]	; (80018a4 <HAL_GPIO_Init+0x2f0>)
 8001800:	4013      	ands	r3, r2
 8001802:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d006      	beq.n	800181e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001810:	4b24      	ldr	r3, [pc, #144]	; (80018a4 <HAL_GPIO_Init+0x2f0>)
 8001812:	685a      	ldr	r2, [r3, #4]
 8001814:	4923      	ldr	r1, [pc, #140]	; (80018a4 <HAL_GPIO_Init+0x2f0>)
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	4313      	orrs	r3, r2
 800181a:	604b      	str	r3, [r1, #4]
 800181c:	e006      	b.n	800182c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800181e:	4b21      	ldr	r3, [pc, #132]	; (80018a4 <HAL_GPIO_Init+0x2f0>)
 8001820:	685a      	ldr	r2, [r3, #4]
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	43db      	mvns	r3, r3
 8001826:	491f      	ldr	r1, [pc, #124]	; (80018a4 <HAL_GPIO_Init+0x2f0>)
 8001828:	4013      	ands	r3, r2
 800182a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d006      	beq.n	8001846 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001838:	4b1a      	ldr	r3, [pc, #104]	; (80018a4 <HAL_GPIO_Init+0x2f0>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	4919      	ldr	r1, [pc, #100]	; (80018a4 <HAL_GPIO_Init+0x2f0>)
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	4313      	orrs	r3, r2
 8001842:	600b      	str	r3, [r1, #0]
 8001844:	e006      	b.n	8001854 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001846:	4b17      	ldr	r3, [pc, #92]	; (80018a4 <HAL_GPIO_Init+0x2f0>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	43db      	mvns	r3, r3
 800184e:	4915      	ldr	r1, [pc, #84]	; (80018a4 <HAL_GPIO_Init+0x2f0>)
 8001850:	4013      	ands	r3, r2
 8001852:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001856:	3301      	adds	r3, #1
 8001858:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001860:	fa22 f303 	lsr.w	r3, r2, r3
 8001864:	2b00      	cmp	r3, #0
 8001866:	f47f aeaf 	bne.w	80015c8 <HAL_GPIO_Init+0x14>
  }
}
 800186a:	bf00      	nop
 800186c:	bf00      	nop
 800186e:	372c      	adds	r7, #44	; 0x2c
 8001870:	46bd      	mov	sp, r7
 8001872:	bc80      	pop	{r7}
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	10320000 	.word	0x10320000
 800187c:	10310000 	.word	0x10310000
 8001880:	10220000 	.word	0x10220000
 8001884:	10210000 	.word	0x10210000
 8001888:	10120000 	.word	0x10120000
 800188c:	10110000 	.word	0x10110000
 8001890:	40021000 	.word	0x40021000
 8001894:	40010000 	.word	0x40010000
 8001898:	40010800 	.word	0x40010800
 800189c:	40010c00 	.word	0x40010c00
 80018a0:	40011000 	.word	0x40011000
 80018a4:	40010400 	.word	0x40010400

080018a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	460b      	mov	r3, r1
 80018b2:	807b      	strh	r3, [r7, #2]
 80018b4:	4613      	mov	r3, r2
 80018b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018b8:	787b      	ldrb	r3, [r7, #1]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d003      	beq.n	80018c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018be:	887a      	ldrh	r2, [r7, #2]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018c4:	e003      	b.n	80018ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018c6:	887b      	ldrh	r3, [r7, #2]
 80018c8:	041a      	lsls	r2, r3, #16
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	611a      	str	r2, [r3, #16]
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr

080018d8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	460b      	mov	r3, r1
 80018e2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018ea:	887a      	ldrh	r2, [r7, #2]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4013      	ands	r3, r2
 80018f0:	041a      	lsls	r2, r3, #16
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	43d9      	mvns	r1, r3
 80018f6:	887b      	ldrh	r3, [r7, #2]
 80018f8:	400b      	ands	r3, r1
 80018fa:	431a      	orrs	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	611a      	str	r2, [r3, #16]
}
 8001900:	bf00      	nop
 8001902:	3714      	adds	r7, #20
 8001904:	46bd      	mov	sp, r7
 8001906:	bc80      	pop	{r7}
 8001908:	4770      	bx	lr
	...

0800190c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d101      	bne.n	800191e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e26c      	b.n	8001df8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	2b00      	cmp	r3, #0
 8001928:	f000 8087 	beq.w	8001a3a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800192c:	4b92      	ldr	r3, [pc, #584]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f003 030c 	and.w	r3, r3, #12
 8001934:	2b04      	cmp	r3, #4
 8001936:	d00c      	beq.n	8001952 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001938:	4b8f      	ldr	r3, [pc, #572]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f003 030c 	and.w	r3, r3, #12
 8001940:	2b08      	cmp	r3, #8
 8001942:	d112      	bne.n	800196a <HAL_RCC_OscConfig+0x5e>
 8001944:	4b8c      	ldr	r3, [pc, #560]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800194c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001950:	d10b      	bne.n	800196a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001952:	4b89      	ldr	r3, [pc, #548]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d06c      	beq.n	8001a38 <HAL_RCC_OscConfig+0x12c>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d168      	bne.n	8001a38 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e246      	b.n	8001df8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001972:	d106      	bne.n	8001982 <HAL_RCC_OscConfig+0x76>
 8001974:	4b80      	ldr	r3, [pc, #512]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a7f      	ldr	r2, [pc, #508]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 800197a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800197e:	6013      	str	r3, [r2, #0]
 8001980:	e02e      	b.n	80019e0 <HAL_RCC_OscConfig+0xd4>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d10c      	bne.n	80019a4 <HAL_RCC_OscConfig+0x98>
 800198a:	4b7b      	ldr	r3, [pc, #492]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a7a      	ldr	r2, [pc, #488]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001990:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001994:	6013      	str	r3, [r2, #0]
 8001996:	4b78      	ldr	r3, [pc, #480]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a77      	ldr	r2, [pc, #476]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 800199c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019a0:	6013      	str	r3, [r2, #0]
 80019a2:	e01d      	b.n	80019e0 <HAL_RCC_OscConfig+0xd4>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019ac:	d10c      	bne.n	80019c8 <HAL_RCC_OscConfig+0xbc>
 80019ae:	4b72      	ldr	r3, [pc, #456]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a71      	ldr	r2, [pc, #452]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 80019b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019b8:	6013      	str	r3, [r2, #0]
 80019ba:	4b6f      	ldr	r3, [pc, #444]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a6e      	ldr	r2, [pc, #440]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 80019c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019c4:	6013      	str	r3, [r2, #0]
 80019c6:	e00b      	b.n	80019e0 <HAL_RCC_OscConfig+0xd4>
 80019c8:	4b6b      	ldr	r3, [pc, #428]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a6a      	ldr	r2, [pc, #424]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 80019ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019d2:	6013      	str	r3, [r2, #0]
 80019d4:	4b68      	ldr	r3, [pc, #416]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a67      	ldr	r2, [pc, #412]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 80019da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d013      	beq.n	8001a10 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e8:	f7ff fccc 	bl	8001384 <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019f0:	f7ff fcc8 	bl	8001384 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b64      	cmp	r3, #100	; 0x64
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e1fa      	b.n	8001df8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a02:	4b5d      	ldr	r3, [pc, #372]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d0f0      	beq.n	80019f0 <HAL_RCC_OscConfig+0xe4>
 8001a0e:	e014      	b.n	8001a3a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a10:	f7ff fcb8 	bl	8001384 <HAL_GetTick>
 8001a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a18:	f7ff fcb4 	bl	8001384 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b64      	cmp	r3, #100	; 0x64
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e1e6      	b.n	8001df8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a2a:	4b53      	ldr	r3, [pc, #332]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1f0      	bne.n	8001a18 <HAL_RCC_OscConfig+0x10c>
 8001a36:	e000      	b.n	8001a3a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d063      	beq.n	8001b0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a46:	4b4c      	ldr	r3, [pc, #304]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f003 030c 	and.w	r3, r3, #12
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d00b      	beq.n	8001a6a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a52:	4b49      	ldr	r3, [pc, #292]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f003 030c 	and.w	r3, r3, #12
 8001a5a:	2b08      	cmp	r3, #8
 8001a5c:	d11c      	bne.n	8001a98 <HAL_RCC_OscConfig+0x18c>
 8001a5e:	4b46      	ldr	r3, [pc, #280]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d116      	bne.n	8001a98 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a6a:	4b43      	ldr	r3, [pc, #268]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d005      	beq.n	8001a82 <HAL_RCC_OscConfig+0x176>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	691b      	ldr	r3, [r3, #16]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d001      	beq.n	8001a82 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e1ba      	b.n	8001df8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a82:	4b3d      	ldr	r3, [pc, #244]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	695b      	ldr	r3, [r3, #20]
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	4939      	ldr	r1, [pc, #228]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001a92:	4313      	orrs	r3, r2
 8001a94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a96:	e03a      	b.n	8001b0e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	691b      	ldr	r3, [r3, #16]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d020      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001aa0:	4b36      	ldr	r3, [pc, #216]	; (8001b7c <HAL_RCC_OscConfig+0x270>)
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa6:	f7ff fc6d 	bl	8001384 <HAL_GetTick>
 8001aaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aac:	e008      	b.n	8001ac0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aae:	f7ff fc69 	bl	8001384 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e19b      	b.n	8001df8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac0:	4b2d      	ldr	r3, [pc, #180]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0302 	and.w	r3, r3, #2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d0f0      	beq.n	8001aae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001acc:	4b2a      	ldr	r3, [pc, #168]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	695b      	ldr	r3, [r3, #20]
 8001ad8:	00db      	lsls	r3, r3, #3
 8001ada:	4927      	ldr	r1, [pc, #156]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	600b      	str	r3, [r1, #0]
 8001ae0:	e015      	b.n	8001b0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ae2:	4b26      	ldr	r3, [pc, #152]	; (8001b7c <HAL_RCC_OscConfig+0x270>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae8:	f7ff fc4c 	bl	8001384 <HAL_GetTick>
 8001aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aee:	e008      	b.n	8001b02 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001af0:	f7ff fc48 	bl	8001384 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e17a      	b.n	8001df8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b02:	4b1d      	ldr	r3, [pc, #116]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1f0      	bne.n	8001af0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0308 	and.w	r3, r3, #8
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d03a      	beq.n	8001b90 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	699b      	ldr	r3, [r3, #24]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d019      	beq.n	8001b56 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b22:	4b17      	ldr	r3, [pc, #92]	; (8001b80 <HAL_RCC_OscConfig+0x274>)
 8001b24:	2201      	movs	r2, #1
 8001b26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b28:	f7ff fc2c 	bl	8001384 <HAL_GetTick>
 8001b2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b2e:	e008      	b.n	8001b42 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b30:	f7ff fc28 	bl	8001384 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e15a      	b.n	8001df8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b42:	4b0d      	ldr	r3, [pc, #52]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d0f0      	beq.n	8001b30 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b4e:	2001      	movs	r0, #1
 8001b50:	f000 fa9a 	bl	8002088 <RCC_Delay>
 8001b54:	e01c      	b.n	8001b90 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b56:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <HAL_RCC_OscConfig+0x274>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b5c:	f7ff fc12 	bl	8001384 <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b62:	e00f      	b.n	8001b84 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b64:	f7ff fc0e 	bl	8001384 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d908      	bls.n	8001b84 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e140      	b.n	8001df8 <HAL_RCC_OscConfig+0x4ec>
 8001b76:	bf00      	nop
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	42420000 	.word	0x42420000
 8001b80:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b84:	4b9e      	ldr	r3, [pc, #632]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d1e9      	bne.n	8001b64 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	f000 80a6 	beq.w	8001cea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ba2:	4b97      	ldr	r3, [pc, #604]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001ba4:	69db      	ldr	r3, [r3, #28]
 8001ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d10d      	bne.n	8001bca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bae:	4b94      	ldr	r3, [pc, #592]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	4a93      	ldr	r2, [pc, #588]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb8:	61d3      	str	r3, [r2, #28]
 8001bba:	4b91      	ldr	r3, [pc, #580]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001bbc:	69db      	ldr	r3, [r3, #28]
 8001bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc2:	60bb      	str	r3, [r7, #8]
 8001bc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bca:	4b8e      	ldr	r3, [pc, #568]	; (8001e04 <HAL_RCC_OscConfig+0x4f8>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d118      	bne.n	8001c08 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bd6:	4b8b      	ldr	r3, [pc, #556]	; (8001e04 <HAL_RCC_OscConfig+0x4f8>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a8a      	ldr	r2, [pc, #552]	; (8001e04 <HAL_RCC_OscConfig+0x4f8>)
 8001bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001be0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001be2:	f7ff fbcf 	bl	8001384 <HAL_GetTick>
 8001be6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be8:	e008      	b.n	8001bfc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bea:	f7ff fbcb 	bl	8001384 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b64      	cmp	r3, #100	; 0x64
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e0fd      	b.n	8001df8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bfc:	4b81      	ldr	r3, [pc, #516]	; (8001e04 <HAL_RCC_OscConfig+0x4f8>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d0f0      	beq.n	8001bea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d106      	bne.n	8001c1e <HAL_RCC_OscConfig+0x312>
 8001c10:	4b7b      	ldr	r3, [pc, #492]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001c12:	6a1b      	ldr	r3, [r3, #32]
 8001c14:	4a7a      	ldr	r2, [pc, #488]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001c16:	f043 0301 	orr.w	r3, r3, #1
 8001c1a:	6213      	str	r3, [r2, #32]
 8001c1c:	e02d      	b.n	8001c7a <HAL_RCC_OscConfig+0x36e>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d10c      	bne.n	8001c40 <HAL_RCC_OscConfig+0x334>
 8001c26:	4b76      	ldr	r3, [pc, #472]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001c28:	6a1b      	ldr	r3, [r3, #32]
 8001c2a:	4a75      	ldr	r2, [pc, #468]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001c2c:	f023 0301 	bic.w	r3, r3, #1
 8001c30:	6213      	str	r3, [r2, #32]
 8001c32:	4b73      	ldr	r3, [pc, #460]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001c34:	6a1b      	ldr	r3, [r3, #32]
 8001c36:	4a72      	ldr	r2, [pc, #456]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001c38:	f023 0304 	bic.w	r3, r3, #4
 8001c3c:	6213      	str	r3, [r2, #32]
 8001c3e:	e01c      	b.n	8001c7a <HAL_RCC_OscConfig+0x36e>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	2b05      	cmp	r3, #5
 8001c46:	d10c      	bne.n	8001c62 <HAL_RCC_OscConfig+0x356>
 8001c48:	4b6d      	ldr	r3, [pc, #436]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
 8001c4c:	4a6c      	ldr	r2, [pc, #432]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001c4e:	f043 0304 	orr.w	r3, r3, #4
 8001c52:	6213      	str	r3, [r2, #32]
 8001c54:	4b6a      	ldr	r3, [pc, #424]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001c56:	6a1b      	ldr	r3, [r3, #32]
 8001c58:	4a69      	ldr	r2, [pc, #420]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001c5a:	f043 0301 	orr.w	r3, r3, #1
 8001c5e:	6213      	str	r3, [r2, #32]
 8001c60:	e00b      	b.n	8001c7a <HAL_RCC_OscConfig+0x36e>
 8001c62:	4b67      	ldr	r3, [pc, #412]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001c64:	6a1b      	ldr	r3, [r3, #32]
 8001c66:	4a66      	ldr	r2, [pc, #408]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001c68:	f023 0301 	bic.w	r3, r3, #1
 8001c6c:	6213      	str	r3, [r2, #32]
 8001c6e:	4b64      	ldr	r3, [pc, #400]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001c70:	6a1b      	ldr	r3, [r3, #32]
 8001c72:	4a63      	ldr	r2, [pc, #396]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001c74:	f023 0304 	bic.w	r3, r3, #4
 8001c78:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d015      	beq.n	8001cae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c82:	f7ff fb7f 	bl	8001384 <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c88:	e00a      	b.n	8001ca0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c8a:	f7ff fb7b 	bl	8001384 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e0ab      	b.n	8001df8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ca0:	4b57      	ldr	r3, [pc, #348]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001ca2:	6a1b      	ldr	r3, [r3, #32]
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d0ee      	beq.n	8001c8a <HAL_RCC_OscConfig+0x37e>
 8001cac:	e014      	b.n	8001cd8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cae:	f7ff fb69 	bl	8001384 <HAL_GetTick>
 8001cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cb4:	e00a      	b.n	8001ccc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cb6:	f7ff fb65 	bl	8001384 <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d901      	bls.n	8001ccc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e095      	b.n	8001df8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ccc:	4b4c      	ldr	r3, [pc, #304]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001cce:	6a1b      	ldr	r3, [r3, #32]
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d1ee      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001cd8:	7dfb      	ldrb	r3, [r7, #23]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d105      	bne.n	8001cea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cde:	4b48      	ldr	r3, [pc, #288]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	4a47      	ldr	r2, [pc, #284]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001ce4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ce8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	69db      	ldr	r3, [r3, #28]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f000 8081 	beq.w	8001df6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cf4:	4b42      	ldr	r3, [pc, #264]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f003 030c 	and.w	r3, r3, #12
 8001cfc:	2b08      	cmp	r3, #8
 8001cfe:	d061      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	69db      	ldr	r3, [r3, #28]
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d146      	bne.n	8001d96 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d08:	4b3f      	ldr	r3, [pc, #252]	; (8001e08 <HAL_RCC_OscConfig+0x4fc>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0e:	f7ff fb39 	bl	8001384 <HAL_GetTick>
 8001d12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d14:	e008      	b.n	8001d28 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d16:	f7ff fb35 	bl	8001384 <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e067      	b.n	8001df8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d28:	4b35      	ldr	r3, [pc, #212]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1f0      	bne.n	8001d16 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a1b      	ldr	r3, [r3, #32]
 8001d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d3c:	d108      	bne.n	8001d50 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d3e:	4b30      	ldr	r3, [pc, #192]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	492d      	ldr	r1, [pc, #180]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d50:	4b2b      	ldr	r3, [pc, #172]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a19      	ldr	r1, [r3, #32]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d60:	430b      	orrs	r3, r1
 8001d62:	4927      	ldr	r1, [pc, #156]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001d64:	4313      	orrs	r3, r2
 8001d66:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d68:	4b27      	ldr	r3, [pc, #156]	; (8001e08 <HAL_RCC_OscConfig+0x4fc>)
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6e:	f7ff fb09 	bl	8001384 <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d76:	f7ff fb05 	bl	8001384 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e037      	b.n	8001df8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d88:	4b1d      	ldr	r3, [pc, #116]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d0f0      	beq.n	8001d76 <HAL_RCC_OscConfig+0x46a>
 8001d94:	e02f      	b.n	8001df6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d96:	4b1c      	ldr	r3, [pc, #112]	; (8001e08 <HAL_RCC_OscConfig+0x4fc>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9c:	f7ff faf2 	bl	8001384 <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da4:	f7ff faee 	bl	8001384 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e020      	b.n	8001df8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001db6:	4b12      	ldr	r3, [pc, #72]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1f0      	bne.n	8001da4 <HAL_RCC_OscConfig+0x498>
 8001dc2:	e018      	b.n	8001df6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	69db      	ldr	r3, [r3, #28]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d101      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e013      	b.n	8001df8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001dd0:	4b0b      	ldr	r3, [pc, #44]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a1b      	ldr	r3, [r3, #32]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d106      	bne.n	8001df2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d001      	beq.n	8001df6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e000      	b.n	8001df8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3718      	adds	r7, #24
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40021000 	.word	0x40021000
 8001e04:	40007000 	.word	0x40007000
 8001e08:	42420060 	.word	0x42420060

08001e0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d101      	bne.n	8001e20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e0d0      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e20:	4b6a      	ldr	r3, [pc, #424]	; (8001fcc <HAL_RCC_ClockConfig+0x1c0>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0307 	and.w	r3, r3, #7
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d910      	bls.n	8001e50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e2e:	4b67      	ldr	r3, [pc, #412]	; (8001fcc <HAL_RCC_ClockConfig+0x1c0>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f023 0207 	bic.w	r2, r3, #7
 8001e36:	4965      	ldr	r1, [pc, #404]	; (8001fcc <HAL_RCC_ClockConfig+0x1c0>)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e3e:	4b63      	ldr	r3, [pc, #396]	; (8001fcc <HAL_RCC_ClockConfig+0x1c0>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	683a      	ldr	r2, [r7, #0]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d001      	beq.n	8001e50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e0b8      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d020      	beq.n	8001e9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0304 	and.w	r3, r3, #4
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d005      	beq.n	8001e74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e68:	4b59      	ldr	r3, [pc, #356]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	4a58      	ldr	r2, [pc, #352]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0308 	and.w	r3, r3, #8
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d005      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e80:	4b53      	ldr	r3, [pc, #332]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	4a52      	ldr	r2, [pc, #328]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e86:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e8c:	4b50      	ldr	r3, [pc, #320]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	494d      	ldr	r1, [pc, #308]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d040      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d107      	bne.n	8001ec2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eb2:	4b47      	ldr	r3, [pc, #284]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d115      	bne.n	8001eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e07f      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d107      	bne.n	8001eda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eca:	4b41      	ldr	r3, [pc, #260]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d109      	bne.n	8001eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e073      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eda:	4b3d      	ldr	r3, [pc, #244]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e06b      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eea:	4b39      	ldr	r3, [pc, #228]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f023 0203 	bic.w	r2, r3, #3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	4936      	ldr	r1, [pc, #216]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001efc:	f7ff fa42 	bl	8001384 <HAL_GetTick>
 8001f00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f02:	e00a      	b.n	8001f1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f04:	f7ff fa3e 	bl	8001384 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e053      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f1a:	4b2d      	ldr	r3, [pc, #180]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f003 020c 	and.w	r2, r3, #12
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d1eb      	bne.n	8001f04 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f2c:	4b27      	ldr	r3, [pc, #156]	; (8001fcc <HAL_RCC_ClockConfig+0x1c0>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d210      	bcs.n	8001f5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f3a:	4b24      	ldr	r3, [pc, #144]	; (8001fcc <HAL_RCC_ClockConfig+0x1c0>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f023 0207 	bic.w	r2, r3, #7
 8001f42:	4922      	ldr	r1, [pc, #136]	; (8001fcc <HAL_RCC_ClockConfig+0x1c0>)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f4a:	4b20      	ldr	r3, [pc, #128]	; (8001fcc <HAL_RCC_ClockConfig+0x1c0>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d001      	beq.n	8001f5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e032      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0304 	and.w	r3, r3, #4
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d008      	beq.n	8001f7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f68:	4b19      	ldr	r3, [pc, #100]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	4916      	ldr	r1, [pc, #88]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0308 	and.w	r3, r3, #8
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d009      	beq.n	8001f9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f86:	4b12      	ldr	r3, [pc, #72]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	490e      	ldr	r1, [pc, #56]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f9a:	f000 f821 	bl	8001fe0 <HAL_RCC_GetSysClockFreq>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	091b      	lsrs	r3, r3, #4
 8001fa6:	f003 030f 	and.w	r3, r3, #15
 8001faa:	490a      	ldr	r1, [pc, #40]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001fac:	5ccb      	ldrb	r3, [r1, r3]
 8001fae:	fa22 f303 	lsr.w	r3, r2, r3
 8001fb2:	4a09      	ldr	r2, [pc, #36]	; (8001fd8 <HAL_RCC_ClockConfig+0x1cc>)
 8001fb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001fb6:	4b09      	ldr	r3, [pc, #36]	; (8001fdc <HAL_RCC_ClockConfig+0x1d0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7ff f9a0 	bl	8001300 <HAL_InitTick>

  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40022000 	.word	0x40022000
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	0800291c 	.word	0x0800291c
 8001fd8:	20000000 	.word	0x20000000
 8001fdc:	20000004 	.word	0x20000004

08001fe0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b087      	sub	sp, #28
 8001fe4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60fb      	str	r3, [r7, #12]
 8001fea:	2300      	movs	r3, #0
 8001fec:	60bb      	str	r3, [r7, #8]
 8001fee:	2300      	movs	r3, #0
 8001ff0:	617b      	str	r3, [r7, #20]
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ffa:	4b1e      	ldr	r3, [pc, #120]	; (8002074 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f003 030c 	and.w	r3, r3, #12
 8002006:	2b04      	cmp	r3, #4
 8002008:	d002      	beq.n	8002010 <HAL_RCC_GetSysClockFreq+0x30>
 800200a:	2b08      	cmp	r3, #8
 800200c:	d003      	beq.n	8002016 <HAL_RCC_GetSysClockFreq+0x36>
 800200e:	e027      	b.n	8002060 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002010:	4b19      	ldr	r3, [pc, #100]	; (8002078 <HAL_RCC_GetSysClockFreq+0x98>)
 8002012:	613b      	str	r3, [r7, #16]
      break;
 8002014:	e027      	b.n	8002066 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	0c9b      	lsrs	r3, r3, #18
 800201a:	f003 030f 	and.w	r3, r3, #15
 800201e:	4a17      	ldr	r2, [pc, #92]	; (800207c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002020:	5cd3      	ldrb	r3, [r2, r3]
 8002022:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d010      	beq.n	8002050 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800202e:	4b11      	ldr	r3, [pc, #68]	; (8002074 <HAL_RCC_GetSysClockFreq+0x94>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	0c5b      	lsrs	r3, r3, #17
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	4a11      	ldr	r2, [pc, #68]	; (8002080 <HAL_RCC_GetSysClockFreq+0xa0>)
 800203a:	5cd3      	ldrb	r3, [r2, r3]
 800203c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a0d      	ldr	r2, [pc, #52]	; (8002078 <HAL_RCC_GetSysClockFreq+0x98>)
 8002042:	fb02 f203 	mul.w	r2, r2, r3
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	fbb2 f3f3 	udiv	r3, r2, r3
 800204c:	617b      	str	r3, [r7, #20]
 800204e:	e004      	b.n	800205a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a0c      	ldr	r2, [pc, #48]	; (8002084 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002054:	fb02 f303 	mul.w	r3, r2, r3
 8002058:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	613b      	str	r3, [r7, #16]
      break;
 800205e:	e002      	b.n	8002066 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002060:	4b05      	ldr	r3, [pc, #20]	; (8002078 <HAL_RCC_GetSysClockFreq+0x98>)
 8002062:	613b      	str	r3, [r7, #16]
      break;
 8002064:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002066:	693b      	ldr	r3, [r7, #16]
}
 8002068:	4618      	mov	r0, r3
 800206a:	371c      	adds	r7, #28
 800206c:	46bd      	mov	sp, r7
 800206e:	bc80      	pop	{r7}
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	40021000 	.word	0x40021000
 8002078:	007a1200 	.word	0x007a1200
 800207c:	0800292c 	.word	0x0800292c
 8002080:	0800293c 	.word	0x0800293c
 8002084:	003d0900 	.word	0x003d0900

08002088 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002090:	4b0a      	ldr	r3, [pc, #40]	; (80020bc <RCC_Delay+0x34>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a0a      	ldr	r2, [pc, #40]	; (80020c0 <RCC_Delay+0x38>)
 8002096:	fba2 2303 	umull	r2, r3, r2, r3
 800209a:	0a5b      	lsrs	r3, r3, #9
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	fb02 f303 	mul.w	r3, r2, r3
 80020a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020a4:	bf00      	nop
  }
  while (Delay --);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	1e5a      	subs	r2, r3, #1
 80020aa:	60fa      	str	r2, [r7, #12]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1f9      	bne.n	80020a4 <RCC_Delay+0x1c>
}
 80020b0:	bf00      	nop
 80020b2:	bf00      	nop
 80020b4:	3714      	adds	r7, #20
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bc80      	pop	{r7}
 80020ba:	4770      	bx	lr
 80020bc:	20000000 	.word	0x20000000
 80020c0:	10624dd3 	.word	0x10624dd3

080020c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e041      	b.n	800215a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d106      	bne.n	80020f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7ff f870 	bl	80011d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2202      	movs	r2, #2
 80020f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	3304      	adds	r3, #4
 8002100:	4619      	mov	r1, r3
 8002102:	4610      	mov	r0, r2
 8002104:	f000 fa6e 	bl	80025e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002172:	b2db      	uxtb	r3, r3
 8002174:	2b01      	cmp	r3, #1
 8002176:	d001      	beq.n	800217c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e035      	b.n	80021e8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2202      	movs	r2, #2
 8002180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68da      	ldr	r2, [r3, #12]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f042 0201 	orr.w	r2, r2, #1
 8002192:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a16      	ldr	r2, [pc, #88]	; (80021f4 <HAL_TIM_Base_Start_IT+0x90>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d009      	beq.n	80021b2 <HAL_TIM_Base_Start_IT+0x4e>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021a6:	d004      	beq.n	80021b2 <HAL_TIM_Base_Start_IT+0x4e>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a12      	ldr	r2, [pc, #72]	; (80021f8 <HAL_TIM_Base_Start_IT+0x94>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d111      	bne.n	80021d6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f003 0307 	and.w	r3, r3, #7
 80021bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2b06      	cmp	r3, #6
 80021c2:	d010      	beq.n	80021e6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f042 0201 	orr.w	r2, r2, #1
 80021d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021d4:	e007      	b.n	80021e6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f042 0201 	orr.w	r2, r2, #1
 80021e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3714      	adds	r7, #20
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bc80      	pop	{r7}
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	40012c00 	.word	0x40012c00
 80021f8:	40000400 	.word	0x40000400

080021fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b02      	cmp	r3, #2
 8002210:	d122      	bne.n	8002258 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b02      	cmp	r3, #2
 800221e:	d11b      	bne.n	8002258 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f06f 0202 	mvn.w	r2, #2
 8002228:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2201      	movs	r2, #1
 800222e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	f003 0303 	and.w	r3, r3, #3
 800223a:	2b00      	cmp	r3, #0
 800223c:	d003      	beq.n	8002246 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 f9b4 	bl	80025ac <HAL_TIM_IC_CaptureCallback>
 8002244:	e005      	b.n	8002252 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 f9a7 	bl	800259a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f000 f9b6 	bl	80025be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	f003 0304 	and.w	r3, r3, #4
 8002262:	2b04      	cmp	r3, #4
 8002264:	d122      	bne.n	80022ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	f003 0304 	and.w	r3, r3, #4
 8002270:	2b04      	cmp	r3, #4
 8002272:	d11b      	bne.n	80022ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f06f 0204 	mvn.w	r2, #4
 800227c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2202      	movs	r2, #2
 8002282:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800228e:	2b00      	cmp	r3, #0
 8002290:	d003      	beq.n	800229a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 f98a 	bl	80025ac <HAL_TIM_IC_CaptureCallback>
 8002298:	e005      	b.n	80022a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 f97d 	bl	800259a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f000 f98c 	bl	80025be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	f003 0308 	and.w	r3, r3, #8
 80022b6:	2b08      	cmp	r3, #8
 80022b8:	d122      	bne.n	8002300 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	f003 0308 	and.w	r3, r3, #8
 80022c4:	2b08      	cmp	r3, #8
 80022c6:	d11b      	bne.n	8002300 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f06f 0208 	mvn.w	r2, #8
 80022d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2204      	movs	r2, #4
 80022d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	f003 0303 	and.w	r3, r3, #3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d003      	beq.n	80022ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 f960 	bl	80025ac <HAL_TIM_IC_CaptureCallback>
 80022ec:	e005      	b.n	80022fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 f953 	bl	800259a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f000 f962 	bl	80025be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	f003 0310 	and.w	r3, r3, #16
 800230a:	2b10      	cmp	r3, #16
 800230c:	d122      	bne.n	8002354 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	f003 0310 	and.w	r3, r3, #16
 8002318:	2b10      	cmp	r3, #16
 800231a:	d11b      	bne.n	8002354 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f06f 0210 	mvn.w	r2, #16
 8002324:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2208      	movs	r2, #8
 800232a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002336:	2b00      	cmp	r3, #0
 8002338:	d003      	beq.n	8002342 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 f936 	bl	80025ac <HAL_TIM_IC_CaptureCallback>
 8002340:	e005      	b.n	800234e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f000 f929 	bl	800259a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f000 f938 	bl	80025be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b01      	cmp	r3, #1
 8002360:	d10e      	bne.n	8002380 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	f003 0301 	and.w	r3, r3, #1
 800236c:	2b01      	cmp	r3, #1
 800236e:	d107      	bne.n	8002380 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f06f 0201 	mvn.w	r2, #1
 8002378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f7fe fee6 	bl	800114c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800238a:	2b80      	cmp	r3, #128	; 0x80
 800238c:	d10e      	bne.n	80023ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002398:	2b80      	cmp	r3, #128	; 0x80
 800239a:	d107      	bne.n	80023ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80023a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 fa6b 	bl	8002882 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023b6:	2b40      	cmp	r3, #64	; 0x40
 80023b8:	d10e      	bne.n	80023d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023c4:	2b40      	cmp	r3, #64	; 0x40
 80023c6:	d107      	bne.n	80023d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 f8fc 	bl	80025d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	f003 0320 	and.w	r3, r3, #32
 80023e2:	2b20      	cmp	r3, #32
 80023e4:	d10e      	bne.n	8002404 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	f003 0320 	and.w	r3, r3, #32
 80023f0:	2b20      	cmp	r3, #32
 80023f2:	d107      	bne.n	8002404 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f06f 0220 	mvn.w	r2, #32
 80023fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 fa36 	bl	8002870 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002404:	bf00      	nop
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002416:	2300      	movs	r3, #0
 8002418:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002420:	2b01      	cmp	r3, #1
 8002422:	d101      	bne.n	8002428 <HAL_TIM_ConfigClockSource+0x1c>
 8002424:	2302      	movs	r3, #2
 8002426:	e0b4      	b.n	8002592 <HAL_TIM_ConfigClockSource+0x186>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2202      	movs	r2, #2
 8002434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002446:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800244e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68ba      	ldr	r2, [r7, #8]
 8002456:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002460:	d03e      	beq.n	80024e0 <HAL_TIM_ConfigClockSource+0xd4>
 8002462:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002466:	f200 8087 	bhi.w	8002578 <HAL_TIM_ConfigClockSource+0x16c>
 800246a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800246e:	f000 8086 	beq.w	800257e <HAL_TIM_ConfigClockSource+0x172>
 8002472:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002476:	d87f      	bhi.n	8002578 <HAL_TIM_ConfigClockSource+0x16c>
 8002478:	2b70      	cmp	r3, #112	; 0x70
 800247a:	d01a      	beq.n	80024b2 <HAL_TIM_ConfigClockSource+0xa6>
 800247c:	2b70      	cmp	r3, #112	; 0x70
 800247e:	d87b      	bhi.n	8002578 <HAL_TIM_ConfigClockSource+0x16c>
 8002480:	2b60      	cmp	r3, #96	; 0x60
 8002482:	d050      	beq.n	8002526 <HAL_TIM_ConfigClockSource+0x11a>
 8002484:	2b60      	cmp	r3, #96	; 0x60
 8002486:	d877      	bhi.n	8002578 <HAL_TIM_ConfigClockSource+0x16c>
 8002488:	2b50      	cmp	r3, #80	; 0x50
 800248a:	d03c      	beq.n	8002506 <HAL_TIM_ConfigClockSource+0xfa>
 800248c:	2b50      	cmp	r3, #80	; 0x50
 800248e:	d873      	bhi.n	8002578 <HAL_TIM_ConfigClockSource+0x16c>
 8002490:	2b40      	cmp	r3, #64	; 0x40
 8002492:	d058      	beq.n	8002546 <HAL_TIM_ConfigClockSource+0x13a>
 8002494:	2b40      	cmp	r3, #64	; 0x40
 8002496:	d86f      	bhi.n	8002578 <HAL_TIM_ConfigClockSource+0x16c>
 8002498:	2b30      	cmp	r3, #48	; 0x30
 800249a:	d064      	beq.n	8002566 <HAL_TIM_ConfigClockSource+0x15a>
 800249c:	2b30      	cmp	r3, #48	; 0x30
 800249e:	d86b      	bhi.n	8002578 <HAL_TIM_ConfigClockSource+0x16c>
 80024a0:	2b20      	cmp	r3, #32
 80024a2:	d060      	beq.n	8002566 <HAL_TIM_ConfigClockSource+0x15a>
 80024a4:	2b20      	cmp	r3, #32
 80024a6:	d867      	bhi.n	8002578 <HAL_TIM_ConfigClockSource+0x16c>
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d05c      	beq.n	8002566 <HAL_TIM_ConfigClockSource+0x15a>
 80024ac:	2b10      	cmp	r3, #16
 80024ae:	d05a      	beq.n	8002566 <HAL_TIM_ConfigClockSource+0x15a>
 80024b0:	e062      	b.n	8002578 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6818      	ldr	r0, [r3, #0]
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	6899      	ldr	r1, [r3, #8]
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685a      	ldr	r2, [r3, #4]
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	f000 f95e 	bl	8002782 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80024d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68ba      	ldr	r2, [r7, #8]
 80024dc:	609a      	str	r2, [r3, #8]
      break;
 80024de:	e04f      	b.n	8002580 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6818      	ldr	r0, [r3, #0]
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	6899      	ldr	r1, [r3, #8]
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685a      	ldr	r2, [r3, #4]
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	f000 f947 	bl	8002782 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	689a      	ldr	r2, [r3, #8]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002502:	609a      	str	r2, [r3, #8]
      break;
 8002504:	e03c      	b.n	8002580 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6818      	ldr	r0, [r3, #0]
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	6859      	ldr	r1, [r3, #4]
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	461a      	mov	r2, r3
 8002514:	f000 f8be 	bl	8002694 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2150      	movs	r1, #80	; 0x50
 800251e:	4618      	mov	r0, r3
 8002520:	f000 f915 	bl	800274e <TIM_ITRx_SetConfig>
      break;
 8002524:	e02c      	b.n	8002580 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6818      	ldr	r0, [r3, #0]
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	6859      	ldr	r1, [r3, #4]
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	461a      	mov	r2, r3
 8002534:	f000 f8dc 	bl	80026f0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2160      	movs	r1, #96	; 0x60
 800253e:	4618      	mov	r0, r3
 8002540:	f000 f905 	bl	800274e <TIM_ITRx_SetConfig>
      break;
 8002544:	e01c      	b.n	8002580 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6818      	ldr	r0, [r3, #0]
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	6859      	ldr	r1, [r3, #4]
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	461a      	mov	r2, r3
 8002554:	f000 f89e 	bl	8002694 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2140      	movs	r1, #64	; 0x40
 800255e:	4618      	mov	r0, r3
 8002560:	f000 f8f5 	bl	800274e <TIM_ITRx_SetConfig>
      break;
 8002564:	e00c      	b.n	8002580 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4619      	mov	r1, r3
 8002570:	4610      	mov	r0, r2
 8002572:	f000 f8ec 	bl	800274e <TIM_ITRx_SetConfig>
      break;
 8002576:	e003      	b.n	8002580 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	73fb      	strb	r3, [r7, #15]
      break;
 800257c:	e000      	b.n	8002580 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800257e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002590:	7bfb      	ldrb	r3, [r7, #15]
}
 8002592:	4618      	mov	r0, r3
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800259a:	b480      	push	{r7}
 800259c:	b083      	sub	sp, #12
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bc80      	pop	{r7}
 80025aa:	4770      	bx	lr

080025ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bc80      	pop	{r7}
 80025bc:	4770      	bx	lr

080025be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bc80      	pop	{r7}
 80025ce:	4770      	bx	lr

080025d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc80      	pop	{r7}
 80025e0:	4770      	bx	lr
	...

080025e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a25      	ldr	r2, [pc, #148]	; (800268c <TIM_Base_SetConfig+0xa8>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d007      	beq.n	800260c <TIM_Base_SetConfig+0x28>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002602:	d003      	beq.n	800260c <TIM_Base_SetConfig+0x28>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a22      	ldr	r2, [pc, #136]	; (8002690 <TIM_Base_SetConfig+0xac>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d108      	bne.n	800261e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002612:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	68fa      	ldr	r2, [r7, #12]
 800261a:	4313      	orrs	r3, r2
 800261c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a1a      	ldr	r2, [pc, #104]	; (800268c <TIM_Base_SetConfig+0xa8>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d007      	beq.n	8002636 <TIM_Base_SetConfig+0x52>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800262c:	d003      	beq.n	8002636 <TIM_Base_SetConfig+0x52>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a17      	ldr	r2, [pc, #92]	; (8002690 <TIM_Base_SetConfig+0xac>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d108      	bne.n	8002648 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800263c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	4313      	orrs	r3, r2
 8002646:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	4313      	orrs	r3, r2
 8002654:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	689a      	ldr	r2, [r3, #8]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a07      	ldr	r2, [pc, #28]	; (800268c <TIM_Base_SetConfig+0xa8>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d103      	bne.n	800267c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	691a      	ldr	r2, [r3, #16]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	615a      	str	r2, [r3, #20]
}
 8002682:	bf00      	nop
 8002684:	3714      	adds	r7, #20
 8002686:	46bd      	mov	sp, r7
 8002688:	bc80      	pop	{r7}
 800268a:	4770      	bx	lr
 800268c:	40012c00 	.word	0x40012c00
 8002690:	40000400 	.word	0x40000400

08002694 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002694:	b480      	push	{r7}
 8002696:	b087      	sub	sp, #28
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6a1b      	ldr	r3, [r3, #32]
 80026a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	f023 0201 	bic.w	r2, r3, #1
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	011b      	lsls	r3, r3, #4
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	f023 030a 	bic.w	r3, r3, #10
 80026d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	697a      	ldr	r2, [r7, #20]
 80026e4:	621a      	str	r2, [r3, #32]
}
 80026e6:	bf00      	nop
 80026e8:	371c      	adds	r7, #28
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bc80      	pop	{r7}
 80026ee:	4770      	bx	lr

080026f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b087      	sub	sp, #28
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	f023 0210 	bic.w	r2, r3, #16
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800271a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	031b      	lsls	r3, r3, #12
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	4313      	orrs	r3, r2
 8002724:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800272c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	011b      	lsls	r3, r3, #4
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	4313      	orrs	r3, r2
 8002736:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	697a      	ldr	r2, [r7, #20]
 8002742:	621a      	str	r2, [r3, #32]
}
 8002744:	bf00      	nop
 8002746:	371c      	adds	r7, #28
 8002748:	46bd      	mov	sp, r7
 800274a:	bc80      	pop	{r7}
 800274c:	4770      	bx	lr

0800274e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800274e:	b480      	push	{r7}
 8002750:	b085      	sub	sp, #20
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
 8002756:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002764:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	4313      	orrs	r3, r2
 800276c:	f043 0307 	orr.w	r3, r3, #7
 8002770:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	609a      	str	r2, [r3, #8]
}
 8002778:	bf00      	nop
 800277a:	3714      	adds	r7, #20
 800277c:	46bd      	mov	sp, r7
 800277e:	bc80      	pop	{r7}
 8002780:	4770      	bx	lr

08002782 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002782:	b480      	push	{r7}
 8002784:	b087      	sub	sp, #28
 8002786:	af00      	add	r7, sp, #0
 8002788:	60f8      	str	r0, [r7, #12]
 800278a:	60b9      	str	r1, [r7, #8]
 800278c:	607a      	str	r2, [r7, #4]
 800278e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800279c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	021a      	lsls	r2, r3, #8
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	431a      	orrs	r2, r3
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	697a      	ldr	r2, [r7, #20]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	697a      	ldr	r2, [r7, #20]
 80027b4:	609a      	str	r2, [r3, #8]
}
 80027b6:	bf00      	nop
 80027b8:	371c      	adds	r7, #28
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bc80      	pop	{r7}
 80027be:	4770      	bx	lr

080027c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d101      	bne.n	80027d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027d4:	2302      	movs	r3, #2
 80027d6:	e041      	b.n	800285c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2202      	movs	r2, #2
 80027e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	4313      	orrs	r3, r2
 8002808:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a14      	ldr	r2, [pc, #80]	; (8002868 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d009      	beq.n	8002830 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002824:	d004      	beq.n	8002830 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a10      	ldr	r2, [pc, #64]	; (800286c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d10c      	bne.n	800284a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002836:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	68ba      	ldr	r2, [r7, #8]
 800283e:	4313      	orrs	r3, r2
 8002840:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68ba      	ldr	r2, [r7, #8]
 8002848:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	3714      	adds	r7, #20
 8002860:	46bd      	mov	sp, r7
 8002862:	bc80      	pop	{r7}
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	40012c00 	.word	0x40012c00
 800286c:	40000400 	.word	0x40000400

08002870 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	bc80      	pop	{r7}
 8002880:	4770      	bx	lr

08002882 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002882:	b480      	push	{r7}
 8002884:	b083      	sub	sp, #12
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	bc80      	pop	{r7}
 8002892:	4770      	bx	lr

08002894 <__libc_init_array>:
 8002894:	b570      	push	{r4, r5, r6, lr}
 8002896:	2600      	movs	r6, #0
 8002898:	4d0c      	ldr	r5, [pc, #48]	; (80028cc <__libc_init_array+0x38>)
 800289a:	4c0d      	ldr	r4, [pc, #52]	; (80028d0 <__libc_init_array+0x3c>)
 800289c:	1b64      	subs	r4, r4, r5
 800289e:	10a4      	asrs	r4, r4, #2
 80028a0:	42a6      	cmp	r6, r4
 80028a2:	d109      	bne.n	80028b8 <__libc_init_array+0x24>
 80028a4:	f000 f822 	bl	80028ec <_init>
 80028a8:	2600      	movs	r6, #0
 80028aa:	4d0a      	ldr	r5, [pc, #40]	; (80028d4 <__libc_init_array+0x40>)
 80028ac:	4c0a      	ldr	r4, [pc, #40]	; (80028d8 <__libc_init_array+0x44>)
 80028ae:	1b64      	subs	r4, r4, r5
 80028b0:	10a4      	asrs	r4, r4, #2
 80028b2:	42a6      	cmp	r6, r4
 80028b4:	d105      	bne.n	80028c2 <__libc_init_array+0x2e>
 80028b6:	bd70      	pop	{r4, r5, r6, pc}
 80028b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80028bc:	4798      	blx	r3
 80028be:	3601      	adds	r6, #1
 80028c0:	e7ee      	b.n	80028a0 <__libc_init_array+0xc>
 80028c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80028c6:	4798      	blx	r3
 80028c8:	3601      	adds	r6, #1
 80028ca:	e7f2      	b.n	80028b2 <__libc_init_array+0x1e>
 80028cc:	08002940 	.word	0x08002940
 80028d0:	08002940 	.word	0x08002940
 80028d4:	08002940 	.word	0x08002940
 80028d8:	08002944 	.word	0x08002944

080028dc <memset>:
 80028dc:	4603      	mov	r3, r0
 80028de:	4402      	add	r2, r0
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d100      	bne.n	80028e6 <memset+0xa>
 80028e4:	4770      	bx	lr
 80028e6:	f803 1b01 	strb.w	r1, [r3], #1
 80028ea:	e7f9      	b.n	80028e0 <memset+0x4>

080028ec <_init>:
 80028ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ee:	bf00      	nop
 80028f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028f2:	bc08      	pop	{r3}
 80028f4:	469e      	mov	lr, r3
 80028f6:	4770      	bx	lr

080028f8 <_fini>:
 80028f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028fa:	bf00      	nop
 80028fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028fe:	bc08      	pop	{r3}
 8002900:	469e      	mov	lr, r3
 8002902:	4770      	bx	lr
